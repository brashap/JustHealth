
c:/Users/IoT_Instructor/Documents/JustHealth/SerialSend/target/1.5.2/argon/SerialSend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d14  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5d30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000011c  2003e2d4  000d5d34  0001e2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000400  2003e3f0  2003e3f0  0002e3f0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5e50  000d5e50  00025e50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5e78  000d5e78  00025e78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c7e43  00000000  00000000  00025e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000eab7  00000000  00000000  000edcbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d26c  00000000  00000000  000fc776  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002190  00000000  00000000  001199e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000042d8  00000000  00000000  0011bb72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030d4d  00000000  00000000  0011fe4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022bb6  00000000  00000000  00150b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001034c7  00000000  00000000  0017374d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c624  00000000  00000000  00276c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fc51 	bl	d58d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fc56 	bl	d58ea <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2d4 	.word	0x2003e2d4
   d4048:	000d5d34 	.word	0x000d5d34
   d404c:	2003e3f0 	.word	0x2003e3f0
   d4050:	2003e3f0 	.word	0x2003e3f0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fca7 	bl	d49ac <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5d28 	.word	0x000d5d28
   d4080:	000d5cf0 	.word	0x000d5cf0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f843 	bl	d4114 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bc4d 	b.w	d4930 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 b9e3 	b.w	d4460 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 b9e9 	b.w	d4470 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 b9e7 	b.w	d4470 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN10CloudClass7publishEPKc.isra.5>:

extern CloudClass Spark __attribute__((deprecated("Spark is now Particle.")));
extern CloudClass Particle;

// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
   d40b4:	b513      	push	{r0, r1, r4, lr}
   d40b6:	4b06      	ldr	r3, [pc, #24]	; (d40d0 <_ZN10CloudClass7publishEPKc.isra.5+0x1c>)
   d40b8:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ba:	f88d 3000 	strb.w	r3, [sp]
   d40be:	2200      	movs	r2, #0
   d40c0:	233c      	movs	r3, #60	; 0x3c

extern CloudClass Spark __attribute__((deprecated("Spark is now Particle.")));
extern CloudClass Particle;

// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
   d40c2:	4604      	mov	r4, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c4:	f000 fde0 	bl	d4c88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
extern CloudClass Particle;

// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}
   d40c8:	4620      	mov	r0, r4
   d40ca:	b002      	add	sp, #8
   d40cc:	bd10      	pop	{r4, pc}
   d40ce:	bf00      	nop
   d40d0:	2003e3f4 	.word	0x2003e3f4

000d40d4 <setup>:


uint8_t data;
char data2[] = "8E6FD304-B90D-9726-FA38-1E9D3646B713,8E6FD304-25B3-6056-3069-9B41C81981BE,8E6FD304-25B3-CEBC-1B7E-444B69A4A92C,8E6FD304-25B3-CEBC-70EA-823B91804DDA,1,1,00:25:10,46,2.39,20.96,2";

void setup() {
   d40d4:	b508      	push	{r3, lr}
  Serial1.begin(115200);
   d40d6:	f001 f8af 	bl	d5238 <_Z22__fetch_global_Serial1v>
   d40da:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
}
   d40de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

uint8_t data;
char data2[] = "8E6FD304-B90D-9726-FA38-1E9D3646B713,8E6FD304-25B3-6056-3069-9B41C81981BE,8E6FD304-25B3-CEBC-1B7E-444B69A4A92C,8E6FD304-25B3-CEBC-70EA-823B91804DDA,1,1,00:25:10,46,2.39,20.96,2";

void setup() {
  Serial1.begin(115200);
   d40e2:	f001 b8a5 	b.w	d5230 <_ZN11USARTSerial5beginEm>

000d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40e6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40e8:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40ea:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d40ec:	b17c      	cbz	r4, d410e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40ee:	6863      	ldr	r3, [r4, #4]
   d40f0:	3b01      	subs	r3, #1
   d40f2:	6063      	str	r3, [r4, #4]
   d40f4:	b95b      	cbnz	r3, d410e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d40f6:	6823      	ldr	r3, [r4, #0]
   d40f8:	4620      	mov	r0, r4
   d40fa:	689b      	ldr	r3, [r3, #8]
   d40fc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40fe:	68a3      	ldr	r3, [r4, #8]
   d4100:	3b01      	subs	r3, #1
   d4102:	60a3      	str	r3, [r4, #8]
   d4104:	b91b      	cbnz	r3, d410e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4106:	6823      	ldr	r3, [r4, #0]
   d4108:	4620      	mov	r0, r4
   d410a:	68db      	ldr	r3, [r3, #12]
   d410c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d410e:	4628      	mov	r0, r5
   d4110:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4114 <loop>:
}

void loop() {
   d4114:	b510      	push	{r4, lr}
  data = random(0x41,0x5B);
   d4116:	215b      	movs	r1, #91	; 0x5b

void setup() {
  Serial1.begin(115200);
}

void loop() {
   d4118:	b086      	sub	sp, #24
  data = random(0x41,0x5B);
   d411a:	2041      	movs	r0, #65	; 0x41
   d411c:	f001 f8d1 	bl	d52c2 <_Z6randomii>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4120:	4c16      	ldr	r4, [pc, #88]	; (d417c <loop+0x68>)
   d4122:	4b17      	ldr	r3, [pc, #92]	; (d4180 <loop+0x6c>)
   d4124:	7018      	strb	r0, [r3, #0]
  /*Serial1.write(data);
  Particle.publish(String(data));
  */
  Serial1.printf("%s",data2);
   d4126:	f001 f887 	bl	d5238 <_Z22__fetch_global_Serial1v>
   d412a:	4623      	mov	r3, r4
   d412c:	4a15      	ldr	r2, [pc, #84]	; (d4184 <loop+0x70>)
   d412e:	2100      	movs	r1, #0
   d4130:	f000 fb63 	bl	d47fa <_ZN5Print11printf_implEbPKcz>
  Particle.publish(String(data2));
   d4134:	4621      	mov	r1, r4
   d4136:	a802      	add	r0, sp, #8
   d4138:	f000 faaf 	bl	d469a <_ZN6StringC1EPK19__FlashStringHelper>
   d413c:	9902      	ldr	r1, [sp, #8]
   d413e:	4668      	mov	r0, sp
   d4140:	f7ff ffb8 	bl	d40b4 <_ZN10CloudClass7publishEPKc.isra.5>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4144:	a801      	add	r0, sp, #4
   d4146:	f7ff ffce 	bl	d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d414a:	a802      	add	r0, sp, #8
   d414c:	f000 fa5e 	bl	d460c <_ZN6StringD1Ev>
  Particle.publish(String(sizeof(data2)));
   d4150:	220a      	movs	r2, #10
   d4152:	21b1      	movs	r1, #177	; 0xb1
   d4154:	a802      	add	r0, sp, #8
   d4156:	f000 fac4 	bl	d46e2 <_ZN6StringC1Ejh>
   d415a:	9902      	ldr	r1, [sp, #8]
   d415c:	4668      	mov	r0, sp
   d415e:	f7ff ffa9 	bl	d40b4 <_ZN10CloudClass7publishEPKc.isra.5>
   d4162:	a801      	add	r0, sp, #4
   d4164:	f7ff ffbf 	bl	d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4168:	a802      	add	r0, sp, #8
   d416a:	f000 fa4f 	bl	d460c <_ZN6StringD1Ev>

  delay(5000);
   d416e:	f241 3088 	movw	r0, #5000	; 0x1388
   d4172:	f000 fb8f 	bl	d4894 <delay>
   d4176:	b006      	add	sp, #24
   d4178:	bd10      	pop	{r4, pc}
   d417a:	bf00      	nop
   d417c:	2003e2d4 	.word	0x2003e2d4
   d4180:	2003e3f5 	.word	0x2003e3f5
   d4184:	000d5a1c 	.word	0x000d5a1c

000d4188 <_GLOBAL__sub_I_data>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4188:	4b02      	ldr	r3, [pc, #8]	; (d4194 <_GLOBAL__sub_I_data+0xc>)
   d418a:	2200      	movs	r2, #0
   d418c:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d418e:	f000 b813 	b.w	d41b8 <HAL_Pin_Map>
   d4192:	bf00      	nop
   d4194:	2003e3f4 	.word	0x2003e3f4

000d4198 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4198:	b508      	push	{r3, lr}
   d419a:	4b02      	ldr	r3, [pc, #8]	; (d41a4 <netdb_freeaddrinfo+0xc>)
   d419c:	681b      	ldr	r3, [r3, #0]
   d419e:	689b      	ldr	r3, [r3, #8]
   d41a0:	9301      	str	r3, [sp, #4]
   d41a2:	bd08      	pop	{r3, pc}
   d41a4:	00030268 	.word	0x00030268

000d41a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41a8:	b508      	push	{r3, lr}
   d41aa:	4b02      	ldr	r3, [pc, #8]	; (d41b4 <netdb_getaddrinfo+0xc>)
   d41ac:	681b      	ldr	r3, [r3, #0]
   d41ae:	68db      	ldr	r3, [r3, #12]
   d41b0:	9301      	str	r3, [sp, #4]
   d41b2:	bd08      	pop	{r3, pc}
   d41b4:	00030268 	.word	0x00030268

000d41b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d41b8:	b508      	push	{r3, lr}
   d41ba:	4b02      	ldr	r3, [pc, #8]	; (d41c4 <HAL_Pin_Map+0xc>)
   d41bc:	681b      	ldr	r3, [r3, #0]
   d41be:	681b      	ldr	r3, [r3, #0]
   d41c0:	9301      	str	r3, [sp, #4]
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	0003022c 	.word	0x0003022c

000d41c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41c8:	b508      	push	{r3, lr}
   d41ca:	4b02      	ldr	r3, [pc, #8]	; (d41d4 <HAL_RNG_GetRandomNumber+0xc>)
   d41cc:	681b      	ldr	r3, [r3, #0]
   d41ce:	685b      	ldr	r3, [r3, #4]
   d41d0:	9301      	str	r3, [sp, #4]
   d41d2:	bd08      	pop	{r3, pc}
   d41d4:	00030218 	.word	0x00030218

000d41d8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41d8:	b508      	push	{r3, lr}
   d41da:	4b02      	ldr	r3, [pc, #8]	; (d41e4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41dc:	681b      	ldr	r3, [r3, #0]
   d41de:	695b      	ldr	r3, [r3, #20]
   d41e0:	9301      	str	r3, [sp, #4]
   d41e2:	bd08      	pop	{r3, pc}
   d41e4:	00030218 	.word	0x00030218

000d41e8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d41e8:	b508      	push	{r3, lr}
   d41ea:	4b02      	ldr	r3, [pc, #8]	; (d41f4 <os_thread_is_current+0xc>)
   d41ec:	681b      	ldr	r3, [r3, #0]
   d41ee:	689b      	ldr	r3, [r3, #8]
   d41f0:	9301      	str	r3, [sp, #4]
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	00030248 	.word	0x00030248

000d41f8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d41f8:	b508      	push	{r3, lr}
   d41fa:	4b02      	ldr	r3, [pc, #8]	; (d4204 <os_thread_join+0xc>)
   d41fc:	681b      	ldr	r3, [r3, #0]
   d41fe:	691b      	ldr	r3, [r3, #16]
   d4200:	9301      	str	r3, [sp, #4]
   d4202:	bd08      	pop	{r3, pc}
   d4204:	00030248 	.word	0x00030248

000d4208 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4208:	b508      	push	{r3, lr}
   d420a:	4b02      	ldr	r3, [pc, #8]	; (d4214 <os_thread_cleanup+0xc>)
   d420c:	681b      	ldr	r3, [r3, #0]
   d420e:	695b      	ldr	r3, [r3, #20]
   d4210:	9301      	str	r3, [sp, #4]
   d4212:	bd08      	pop	{r3, pc}
   d4214:	00030248 	.word	0x00030248

000d4218 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4218:	b508      	push	{r3, lr}
   d421a:	4b02      	ldr	r3, [pc, #8]	; (d4224 <os_mutex_recursive_create+0xc>)
   d421c:	681b      	ldr	r3, [r3, #0]
   d421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4220:	9301      	str	r3, [sp, #4]
   d4222:	bd08      	pop	{r3, pc}
   d4224:	00030248 	.word	0x00030248

000d4228 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4228:	b508      	push	{r3, lr}
   d422a:	4b02      	ldr	r3, [pc, #8]	; (d4234 <os_mutex_recursive_destroy+0xc>)
   d422c:	681b      	ldr	r3, [r3, #0]
   d422e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4230:	9301      	str	r3, [sp, #4]
   d4232:	bd08      	pop	{r3, pc}
   d4234:	00030248 	.word	0x00030248

000d4238 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4238:	b508      	push	{r3, lr}
   d423a:	4b02      	ldr	r3, [pc, #8]	; (d4244 <inet_inet_ntop+0xc>)
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	695b      	ldr	r3, [r3, #20]
   d4240:	9301      	str	r3, [sp, #4]
   d4242:	bd08      	pop	{r3, pc}
   d4244:	00030264 	.word	0x00030264

000d4248 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4248:	b508      	push	{r3, lr}
   d424a:	4b02      	ldr	r3, [pc, #8]	; (d4254 <HAL_USART_Init+0xc>)
   d424c:	681b      	ldr	r3, [r3, #0]
   d424e:	681b      	ldr	r3, [r3, #0]
   d4250:	9301      	str	r3, [sp, #4]
   d4252:	bd08      	pop	{r3, pc}
   d4254:	0003023c 	.word	0x0003023c

000d4258 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4258:	b508      	push	{r3, lr}
   d425a:	4b02      	ldr	r3, [pc, #8]	; (d4264 <HAL_USART_Write_Data+0xc>)
   d425c:	681b      	ldr	r3, [r3, #0]
   d425e:	68db      	ldr	r3, [r3, #12]
   d4260:	9301      	str	r3, [sp, #4]
   d4262:	bd08      	pop	{r3, pc}
   d4264:	0003023c 	.word	0x0003023c

000d4268 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4268:	b508      	push	{r3, lr}
   d426a:	4b02      	ldr	r3, [pc, #8]	; (d4274 <HAL_USART_Available_Data+0xc>)
   d426c:	681b      	ldr	r3, [r3, #0]
   d426e:	691b      	ldr	r3, [r3, #16]
   d4270:	9301      	str	r3, [sp, #4]
   d4272:	bd08      	pop	{r3, pc}
   d4274:	0003023c 	.word	0x0003023c

000d4278 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b02      	ldr	r3, [pc, #8]	; (d4284 <HAL_USART_Read_Data+0xc>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	695b      	ldr	r3, [r3, #20]
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	bd08      	pop	{r3, pc}
   d4284:	0003023c 	.word	0x0003023c

000d4288 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <HAL_USART_Peek_Data+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	699b      	ldr	r3, [r3, #24]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	0003023c 	.word	0x0003023c

000d4298 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <HAL_USART_Flush_Data+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	69db      	ldr	r3, [r3, #28]
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	0003023c 	.word	0x0003023c

000d42a8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <HAL_USART_Available_Data_For_Write+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	0003023c 	.word	0x0003023c

000d42b8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <HAL_USART_BeginConfig+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	0003023c 	.word	0x0003023c

000d42c8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <HAL_USB_USART_Init+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	681b      	ldr	r3, [r3, #0]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	0003024c 	.word	0x0003024c

000d42d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <HAL_USB_USART_Available_Data+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	691b      	ldr	r3, [r3, #16]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	0003024c 	.word	0x0003024c

000d42e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	695b      	ldr	r3, [r3, #20]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	0003024c 	.word	0x0003024c

000d42f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <HAL_USB_USART_Receive_Data+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	699b      	ldr	r3, [r3, #24]
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	0003024c 	.word	0x0003024c

000d4308 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <HAL_USB_USART_Send_Data+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	69db      	ldr	r3, [r3, #28]
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	0003024c 	.word	0x0003024c

000d4318 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <HAL_USB_USART_Flush_Data+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	6a1b      	ldr	r3, [r3, #32]
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	0003024c 	.word	0x0003024c

000d4328 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <set_system_mode+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	685b      	ldr	r3, [r3, #4]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030220 	.word	0x00030220

000d4338 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <system_delay_ms+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	695b      	ldr	r3, [r3, #20]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030220 	.word	0x00030220

000d4348 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <application_thread_current+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030220 	.word	0x00030220

000d4358 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <application_thread_invoke+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030220 	.word	0x00030220

000d4368 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b03      	ldr	r3, [pc, #12]	; (d4378 <system_ctrl_set_app_request_handler+0x10>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4372:	9301      	str	r3, [sp, #4]
   d4374:	bd08      	pop	{r3, pc}
   d4376:	0000      	.short	0x0000
   d4378:	00030220 	.word	0x00030220

000d437c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b03      	ldr	r3, [pc, #12]	; (d438c <system_ctrl_set_result+0x10>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4386:	9301      	str	r3, [sp, #4]
   d4388:	bd08      	pop	{r3, pc}
   d438a:	0000      	.short	0x0000
   d438c:	00030220 	.word	0x00030220

000d4390 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <network_connect+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	685b      	ldr	r3, [r3, #4]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030240 	.word	0x00030240

000d43a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <network_connecting+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	689b      	ldr	r3, [r3, #8]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030240 	.word	0x00030240

000d43b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <network_disconnect+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	68db      	ldr	r3, [r3, #12]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030240 	.word	0x00030240

000d43c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <network_ready+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	691b      	ldr	r3, [r3, #16]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030240 	.word	0x00030240

000d43d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <network_on+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	695b      	ldr	r3, [r3, #20]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030240 	.word	0x00030240

000d43e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <network_off+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	699b      	ldr	r3, [r3, #24]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030240 	.word	0x00030240

000d43f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <network_listen+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	69db      	ldr	r3, [r3, #28]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030240 	.word	0x00030240

000d4400 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <network_listening+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6a1b      	ldr	r3, [r3, #32]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030240 	.word	0x00030240

000d4410 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <network_set_listen_timeout+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030240 	.word	0x00030240

000d4420 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <network_get_listen_timeout+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030240 	.word	0x00030240

000d4430 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <spark_cloud_flag_connected+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	695b      	ldr	r3, [r3, #20]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030244 	.word	0x00030244

000d4440 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <spark_send_event+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	6a1b      	ldr	r3, [r3, #32]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	00030244 	.word	0x00030244

000d4450 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	00030244 	.word	0x00030244

000d4460 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <malloc+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	681b      	ldr	r3, [r3, #0]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003021c 	.word	0x0003021c

000d4470 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <free+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	685b      	ldr	r3, [r3, #4]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003021c 	.word	0x0003021c

000d4480 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <realloc+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	689b      	ldr	r3, [r3, #8]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003021c 	.word	0x0003021c

000d4490 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <vsnprintf+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003021c 	.word	0x0003021c

000d44a0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <abort+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003021c 	.word	0x0003021c

000d44b0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <_malloc_r+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	0003021c 	.word	0x0003021c

000d44c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d44c0:	2200      	movs	r2, #0
   d44c2:	4611      	mov	r1, r2
   d44c4:	6840      	ldr	r0, [r0, #4]
   d44c6:	f7ff bf9b 	b.w	d4400 <network_listening>

000d44ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d44ca:	2200      	movs	r2, #0
   d44cc:	4611      	mov	r1, r2
   d44ce:	6840      	ldr	r0, [r0, #4]
   d44d0:	f7ff bfa6 	b.w	d4420 <network_get_listen_timeout>

000d44d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d44d4:	2200      	movs	r2, #0
   d44d6:	6840      	ldr	r0, [r0, #4]
   d44d8:	f7ff bf9a 	b.w	d4410 <network_set_listen_timeout>

000d44dc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d44dc:	2200      	movs	r2, #0
   d44de:	f081 0101 	eor.w	r1, r1, #1
   d44e2:	6840      	ldr	r0, [r0, #4]
   d44e4:	f7ff bf84 	b.w	d43f0 <network_listen>

000d44e8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d44e8:	2300      	movs	r3, #0
   d44ea:	461a      	mov	r2, r3
   d44ec:	4619      	mov	r1, r3
   d44ee:	6840      	ldr	r0, [r0, #4]
   d44f0:	f7ff bf76 	b.w	d43e0 <network_off>

000d44f4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d44f4:	2300      	movs	r3, #0
   d44f6:	461a      	mov	r2, r3
   d44f8:	4619      	mov	r1, r3
   d44fa:	6840      	ldr	r0, [r0, #4]
   d44fc:	f7ff bf68 	b.w	d43d0 <network_on>

000d4500 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4500:	2200      	movs	r2, #0
   d4502:	4611      	mov	r1, r2
   d4504:	6840      	ldr	r0, [r0, #4]
   d4506:	f7ff bf5b 	b.w	d43c0 <network_ready>

000d450a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d450a:	2200      	movs	r2, #0
   d450c:	4611      	mov	r1, r2
   d450e:	6840      	ldr	r0, [r0, #4]
   d4510:	f7ff bf46 	b.w	d43a0 <network_connecting>

000d4514 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4514:	2200      	movs	r2, #0
   d4516:	2102      	movs	r1, #2
   d4518:	6840      	ldr	r0, [r0, #4]
   d451a:	f7ff bf49 	b.w	d43b0 <network_disconnect>

000d451e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d451e:	2300      	movs	r3, #0
   d4520:	461a      	mov	r2, r3
   d4522:	6840      	ldr	r0, [r0, #4]
   d4524:	f7ff bf34 	b.w	d4390 <network_connect>

000d4528 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4528:	4b02      	ldr	r3, [pc, #8]	; (d4534 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d452a:	2203      	movs	r2, #3
   d452c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d452e:	4a02      	ldr	r2, [pc, #8]	; (d4538 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4530:	601a      	str	r2, [r3, #0]
   d4532:	4770      	bx	lr
   d4534:	2003e3f8 	.word	0x2003e3f8
   d4538:	000d5a28 	.word	0x000d5a28

000d453c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d453c:	b510      	push	{r4, lr}
   d453e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4540:	6800      	ldr	r0, [r0, #0]
   d4542:	b118      	cbz	r0, d454c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4544:	f7ff ff94 	bl	d4470 <free>
            wakeupSource_ = nullptr;
   d4548:	2300      	movs	r3, #0
   d454a:	6023      	str	r3, [r4, #0]
   d454c:	bd10      	pop	{r4, pc}

000d454e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d454e:	b510      	push	{r4, lr}
   d4550:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4552:	f7ff fff3 	bl	d453c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4556:	4620      	mov	r0, r4
   d4558:	bd10      	pop	{r4, pc}
	...

000d455c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d455c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d455e:	4c09      	ldr	r4, [pc, #36]	; (d4584 <_GLOBAL__sub_I_System+0x28>)
   d4560:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4562:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4566:	6020      	str	r0, [r4, #0]
   d4568:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d456a:	71a0      	strb	r0, [r4, #6]
   d456c:	8120      	strh	r0, [r4, #8]
   d456e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4570:	f7ff feda 	bl	d4328 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4574:	4620      	mov	r0, r4
   d4576:	4a04      	ldr	r2, [pc, #16]	; (d4588 <_GLOBAL__sub_I_System+0x2c>)
   d4578:	4904      	ldr	r1, [pc, #16]	; (d458c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d457a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d457e:	f001 b849 	b.w	d5614 <__aeabi_atexit>
   d4582:	bf00      	nop
   d4584:	2003e400 	.word	0x2003e400
   d4588:	2003e3f0 	.word	0x2003e3f0
   d458c:	000d454f 	.word	0x000d454f

000d4590 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4590:	b510      	push	{r4, lr}
   d4592:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4594:	f001 fa2f 	bl	d59f6 <strlen>
   d4598:	3801      	subs	r0, #1
   d459a:	1823      	adds	r3, r4, r0
   d459c:	4620      	mov	r0, r4
	while(i<j){
   d459e:	4298      	cmp	r0, r3
   d45a0:	d206      	bcs.n	d45b0 <_Z11str_reversePc+0x20>
		c = *i;
   d45a2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d45a4:	7819      	ldrb	r1, [r3, #0]
   d45a6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d45aa:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d45ae:	e7f6      	b.n	d459e <_Z11str_reversePc+0xe>
   d45b0:	bd10      	pop	{r4, pc}

000d45b2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d45b2:	b570      	push	{r4, r5, r6, lr}
   d45b4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d45b6:	1e91      	subs	r1, r2, #2
   d45b8:	2922      	cmp	r1, #34	; 0x22
   d45ba:	d820      	bhi.n	d45fe <ultoa+0x4c>
   d45bc:	4625      	mov	r5, r4
   d45be:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d45c0:	b910      	cbnz	r0, d45c8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d45c2:	4423      	add	r3, r4
            *ptr++ = '0';
   d45c4:	2230      	movs	r2, #48	; 0x30
   d45c6:	e00e      	b.n	d45e6 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d45c8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d45cc:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d45d0:	b2c1      	uxtb	r1, r0
   d45d2:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d45d6:	2809      	cmp	r0, #9
                *ptr += '0';
   d45d8:	bf94      	ite	ls
   d45da:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d45dc:	3157      	addhi	r1, #87	; 0x57
   d45de:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d45e2:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d45e4:	e7eb      	b.n	d45be <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d45e6:	4299      	cmp	r1, r3
   d45e8:	d202      	bcs.n	d45f0 <ultoa+0x3e>
            *ptr++ = '0';
   d45ea:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d45ee:	e7fa      	b.n	d45e6 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d45f0:	2300      	movs	r3, #0
	str_reverse(buffer);
   d45f2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d45f4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d45f6:	f7ff ffcb 	bl	d4590 <_Z11str_reversePc>
	return buffer;
   d45fa:	4620      	mov	r0, r4
   d45fc:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d45fe:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4600:	bd70      	pop	{r4, r5, r6, pc}

000d4602 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d4602:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d4604:	2301      	movs	r3, #1
   d4606:	f7ff ffd4 	bl	d45b2 <ultoa>
}
   d460a:	bd08      	pop	{r3, pc}

000d460c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d460c:	b510      	push	{r4, lr}
   d460e:	4604      	mov	r4, r0
{
	free(buffer);
   d4610:	6800      	ldr	r0, [r0, #0]
   d4612:	f7ff ff2d 	bl	d4470 <free>
}
   d4616:	4620      	mov	r0, r4
   d4618:	bd10      	pop	{r4, pc}

000d461a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d461a:	b510      	push	{r4, lr}
   d461c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d461e:	6800      	ldr	r0, [r0, #0]
   d4620:	b108      	cbz	r0, d4626 <_ZN6String10invalidateEv+0xc>
   d4622:	f7ff ff25 	bl	d4470 <free>
	buffer = NULL;
   d4626:	2300      	movs	r3, #0
   d4628:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d462a:	60a3      	str	r3, [r4, #8]
   d462c:	6063      	str	r3, [r4, #4]
   d462e:	bd10      	pop	{r4, pc}

000d4630 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4630:	b538      	push	{r3, r4, r5, lr}
   d4632:	4604      	mov	r4, r0
   d4634:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4636:	6800      	ldr	r0, [r0, #0]
   d4638:	3101      	adds	r1, #1
   d463a:	f7ff ff21 	bl	d4480 <realloc>
	if (newbuffer) {
   d463e:	b110      	cbz	r0, d4646 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4640:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4644:	2001      	movs	r0, #1
	}
	return 0;
}
   d4646:	bd38      	pop	{r3, r4, r5, pc}

000d4648 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4648:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d464a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d464c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d464e:	b113      	cbz	r3, d4656 <_ZN6String7reserveEj+0xe>
   d4650:	6843      	ldr	r3, [r0, #4]
   d4652:	428b      	cmp	r3, r1
   d4654:	d207      	bcs.n	d4666 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4656:	4620      	mov	r0, r4
   d4658:	f7ff ffea 	bl	d4630 <_ZN6String12changeBufferEj>
   d465c:	b120      	cbz	r0, d4668 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d465e:	68a3      	ldr	r3, [r4, #8]
   d4660:	b90b      	cbnz	r3, d4666 <_ZN6String7reserveEj+0x1e>
   d4662:	6822      	ldr	r2, [r4, #0]
   d4664:	7013      	strb	r3, [r2, #0]
   d4666:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4668:	bd10      	pop	{r4, pc}

000d466a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d466a:	b570      	push	{r4, r5, r6, lr}
   d466c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d466e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4670:	4604      	mov	r4, r0
   d4672:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4674:	f7ff ffe8 	bl	d4648 <_ZN6String7reserveEj>
   d4678:	b918      	cbnz	r0, d4682 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d467a:	4620      	mov	r0, r4
   d467c:	f7ff ffcd 	bl	d461a <_ZN6String10invalidateEv>
		return *this;
   d4680:	e009      	b.n	d4696 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4682:	462a      	mov	r2, r5
   d4684:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4686:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4688:	6820      	ldr	r0, [r4, #0]
   d468a:	f001 f923 	bl	d58d4 <memcpy>
	buffer[len] = 0;
   d468e:	6822      	ldr	r2, [r4, #0]
   d4690:	68a3      	ldr	r3, [r4, #8]
   d4692:	2100      	movs	r1, #0
   d4694:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4696:	4620      	mov	r0, r4
   d4698:	bd70      	pop	{r4, r5, r6, pc}

000d469a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d469a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d469c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d469e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d46a0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d46a2:	6043      	str	r3, [r0, #4]
	len = 0;
   d46a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d46a6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d46a8:	460d      	mov	r5, r1
   d46aa:	b139      	cbz	r1, d46bc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d46ac:	4608      	mov	r0, r1
   d46ae:	f001 f9a2 	bl	d59f6 <strlen>
   d46b2:	4629      	mov	r1, r5
   d46b4:	4602      	mov	r2, r0
   d46b6:	4620      	mov	r0, r4
   d46b8:	f7ff ffd7 	bl	d466a <_ZN6String4copyEPKcj>
}
   d46bc:	4620      	mov	r0, r4
   d46be:	bd38      	pop	{r3, r4, r5, pc}

000d46c0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d46c0:	b538      	push	{r3, r4, r5, lr}
   d46c2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d46c4:	460c      	mov	r4, r1
   d46c6:	b141      	cbz	r1, d46da <_ZN6StringaSEPKc+0x1a>
   d46c8:	4608      	mov	r0, r1
   d46ca:	f001 f994 	bl	d59f6 <strlen>
   d46ce:	4621      	mov	r1, r4
   d46d0:	4602      	mov	r2, r0
   d46d2:	4628      	mov	r0, r5
   d46d4:	f7ff ffc9 	bl	d466a <_ZN6String4copyEPKcj>
   d46d8:	e001      	b.n	d46de <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d46da:	f7ff ff9e 	bl	d461a <_ZN6String10invalidateEv>

	return *this;
}
   d46de:	4628      	mov	r0, r5
   d46e0:	bd38      	pop	{r3, r4, r5, pc}

000d46e2 <_ZN6StringC1Ejh>:
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   d46e2:	b510      	push	{r4, lr}
   d46e4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d46e6:	2300      	movs	r3, #0
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   d46e8:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d46ea:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d46ec:	6063      	str	r3, [r4, #4]
	len = 0;
   d46ee:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d46f0:	7323      	strb	r3, [r4, #12]
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   d46f2:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	utoa(value, buf, base);
   d46f4:	a901      	add	r1, sp, #4
   d46f6:	f7ff ff84 	bl	d4602 <utoa>
	*this = buf;
   d46fa:	a901      	add	r1, sp, #4
   d46fc:	4620      	mov	r0, r4
   d46fe:	f7ff ffdf 	bl	d46c0 <_ZN6StringaSEPKc>
}
   d4702:	4620      	mov	r0, r4
   d4704:	b00a      	add	sp, #40	; 0x28
   d4706:	bd10      	pop	{r4, pc}

000d4708 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4708:	b510      	push	{r4, lr}
   d470a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d470c:	6800      	ldr	r0, [r0, #0]
   d470e:	b108      	cbz	r0, d4714 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4710:	f7ff fd8a 	bl	d4228 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4714:	4620      	mov	r0, r4
   d4716:	bd10      	pop	{r4, pc}

000d4718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4718:	680b      	ldr	r3, [r1, #0]
   d471a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d471c:	b113      	cbz	r3, d4724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d471e:	685a      	ldr	r2, [r3, #4]
   d4720:	3201      	adds	r2, #1
   d4722:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4724:	4770      	bx	lr
	...

000d4728 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4728:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d472a:	4c06      	ldr	r4, [pc, #24]	; (d4744 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d472c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d472e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4730:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4732:	f7ff fd71 	bl	d4218 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4736:	4620      	mov	r0, r4
   d4738:	4a03      	ldr	r2, [pc, #12]	; (d4748 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d473a:	4904      	ldr	r1, [pc, #16]	; (d474c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d473c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4740:	f000 bf68 	b.w	d5614 <__aeabi_atexit>
   d4744:	2003e40c 	.word	0x2003e40c
   d4748:	2003e3f0 	.word	0x2003e3f0
   d474c:	000d4709 	.word	0x000d4709

000d4750 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4752:	4606      	mov	r6, r0
   d4754:	460d      	mov	r5, r1
   d4756:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4758:	2400      	movs	r4, #0
  while (size--) {
   d475a:	42bd      	cmp	r5, r7
   d475c:	d00c      	beq.n	d4778 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d475e:	6833      	ldr	r3, [r6, #0]
   d4760:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4764:	689b      	ldr	r3, [r3, #8]
   d4766:	4630      	mov	r0, r6
   d4768:	4798      	blx	r3
     if (chunk>=0)
   d476a:	2800      	cmp	r0, #0
   d476c:	db01      	blt.n	d4772 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d476e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4770:	e7f3      	b.n	d475a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4772:	2c00      	cmp	r4, #0
   d4774:	bf08      	it	eq
   d4776:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4778:	4620      	mov	r0, r4
   d477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d477c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d477c:	b570      	push	{r4, r5, r6, lr}
   d477e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4780:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4782:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4784:	b149      	cbz	r1, d479a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4786:	f001 f936 	bl	d59f6 <strlen>
   d478a:	682b      	ldr	r3, [r5, #0]
   d478c:	4602      	mov	r2, r0
   d478e:	4621      	mov	r1, r4
   d4790:	4628      	mov	r0, r5
   d4792:	68db      	ldr	r3, [r3, #12]
    }
   d4794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4798:	4718      	bx	r3
    }
   d479a:	bd70      	pop	{r4, r5, r6, pc}

000d479c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d479c:	6803      	ldr	r3, [r0, #0]
   d479e:	689b      	ldr	r3, [r3, #8]
   d47a0:	4718      	bx	r3

000d47a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d47a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d47a4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d47a6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d47a8:	f7ff fff8 	bl	d479c <_ZN5Print5printEc>
  n += print('\n');
   d47ac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d47ae:	4604      	mov	r4, r0
  n += print('\n');
   d47b0:	4628      	mov	r0, r5
   d47b2:	f7ff fff3 	bl	d479c <_ZN5Print5printEc>
  return n;
}
   d47b6:	4420      	add	r0, r4
   d47b8:	bd38      	pop	{r3, r4, r5, pc}

000d47ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d47ba:	b530      	push	{r4, r5, lr}
   d47bc:	b08b      	sub	sp, #44	; 0x2c
   d47be:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d47c0:	2100      	movs	r1, #0
   d47c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d47c6:	2a01      	cmp	r2, #1
   d47c8:	bf98      	it	ls
   d47ca:	220a      	movls	r2, #10
   d47cc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d47d0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d47d4:	fb05 3312 	mls	r3, r5, r2, r3
   d47d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d47dc:	2b09      	cmp	r3, #9
   d47de:	bf94      	ite	ls
   d47e0:	3330      	addls	r3, #48	; 0x30
   d47e2:	3337      	addhi	r3, #55	; 0x37
   d47e4:	b2db      	uxtb	r3, r3
   d47e6:	4621      	mov	r1, r4
   d47e8:	f804 3901 	strb.w	r3, [r4], #-1
   d47ec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d47ee:	2d00      	cmp	r5, #0
   d47f0:	d1ee      	bne.n	d47d0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d47f2:	f7ff ffc3 	bl	d477c <_ZN5Print5writeEPKc>
}
   d47f6:	b00b      	add	sp, #44	; 0x2c
   d47f8:	bd30      	pop	{r4, r5, pc}

000d47fa <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d47fa:	b40c      	push	{r2, r3}
   d47fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4800:	b087      	sub	sp, #28
   d4802:	af00      	add	r7, sp, #0
   d4804:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4808:	4605      	mov	r5, r0
   d480a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d480e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4810:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4812:	4623      	mov	r3, r4
   d4814:	464a      	mov	r2, r9
   d4816:	2114      	movs	r1, #20
   d4818:	1d38      	adds	r0, r7, #4
   d481a:	f7ff fe39 	bl	d4490 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d481e:	2813      	cmp	r0, #19
   d4820:	d805      	bhi.n	d482e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4822:	1d39      	adds	r1, r7, #4
   d4824:	4628      	mov	r0, r5
   d4826:	f7ff ffa9 	bl	d477c <_ZN5Print5writeEPKc>
   d482a:	4604      	mov	r4, r0
   d482c:	e013      	b.n	d4856 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d482e:	f100 0308 	add.w	r3, r0, #8
   d4832:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4836:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4838:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d483c:	1c41      	adds	r1, r0, #1
   d483e:	4623      	mov	r3, r4
   d4840:	464a      	mov	r2, r9
   d4842:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4844:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4846:	f7ff fe23 	bl	d4490 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d484a:	4669      	mov	r1, sp
   d484c:	4628      	mov	r0, r5
   d484e:	f7ff ff95 	bl	d477c <_ZN5Print5writeEPKc>
   d4852:	4604      	mov	r4, r0
   d4854:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4856:	b11e      	cbz	r6, d4860 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4858:	4628      	mov	r0, r5
   d485a:	f7ff ffa2 	bl	d47a2 <_ZN5Print7printlnEv>
   d485e:	4404      	add	r4, r0
    return n;
}
   d4860:	4620      	mov	r0, r4
   d4862:	371c      	adds	r7, #28
   d4864:	46bd      	mov	sp, r7
   d4866:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d486a:	b002      	add	sp, #8
   d486c:	4770      	bx	lr
	...

000d4870 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4870:	4b01      	ldr	r3, [pc, #4]	; (d4878 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4872:	4a02      	ldr	r2, [pc, #8]	; (d487c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4874:	601a      	str	r2, [r3, #0]
   d4876:	4770      	bx	lr
   d4878:	2003e410 	.word	0x2003e410
   d487c:	000d5ac7 	.word	0x000d5ac7

000d4880 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4880:	4b02      	ldr	r3, [pc, #8]	; (d488c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4882:	681a      	ldr	r2, [r3, #0]
   d4884:	4b02      	ldr	r3, [pc, #8]	; (d4890 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4886:	601a      	str	r2, [r3, #0]
   d4888:	4770      	bx	lr
   d488a:	bf00      	nop
   d488c:	2003e388 	.word	0x2003e388
   d4890:	2003e414 	.word	0x2003e414

000d4894 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4894:	2100      	movs	r1, #0
   d4896:	f7ff bd4f 	b.w	d4338 <system_delay_ms>

000d489a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d489a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d489c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d489e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48a0:	b113      	cbz	r3, d48a8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48a2:	2203      	movs	r2, #3
   d48a4:	4601      	mov	r1, r0
   d48a6:	4798      	blx	r3
    }
   d48a8:	4620      	mov	r0, r4
   d48aa:	bd10      	pop	{r4, pc}

000d48ac <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d48ac:	b510      	push	{r4, lr}
   d48ae:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48b0:	f7ff fff3 	bl	d489a <_ZNSt14_Function_baseD1Ev>
   d48b4:	4620      	mov	r0, r4
   d48b6:	bd10      	pop	{r4, pc}

000d48b8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d48b8:	b513      	push	{r0, r1, r4, lr}
   d48ba:	460b      	mov	r3, r1
   d48bc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d48be:	c803      	ldmia	r0, {r0, r1}
   d48c0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d48c4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d48c8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d48cc:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d48d0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d48d4:	b002      	add	sp, #8
   d48d6:	bd10      	pop	{r4, pc}

000d48d8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d48d8:	4803      	ldr	r0, [pc, #12]	; (d48e8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d48da:	4a04      	ldr	r2, [pc, #16]	; (d48ec <_GLOBAL__sub_I_RGB+0x14>)
   d48dc:	4904      	ldr	r1, [pc, #16]	; (d48f0 <_GLOBAL__sub_I_RGB+0x18>)
   d48de:	2300      	movs	r3, #0
   d48e0:	6083      	str	r3, [r0, #8]
   d48e2:	f000 be97 	b.w	d5614 <__aeabi_atexit>
   d48e6:	bf00      	nop
   d48e8:	2003e418 	.word	0x2003e418
   d48ec:	2003e3f0 	.word	0x2003e3f0
   d48f0:	000d48ad 	.word	0x000d48ad

000d48f4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d48f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d48f6:	4b0c      	ldr	r3, [pc, #48]	; (d4928 <serialEventRun+0x34>)
   d48f8:	b133      	cbz	r3, d4908 <serialEventRun+0x14>
   d48fa:	f000 fc17 	bl	d512c <_Z16_fetch_usbserialv>
   d48fe:	6803      	ldr	r3, [r0, #0]
   d4900:	691b      	ldr	r3, [r3, #16]
   d4902:	4798      	blx	r3
   d4904:	2800      	cmp	r0, #0
   d4906:	dc09      	bgt.n	d491c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4908:	4b08      	ldr	r3, [pc, #32]	; (d492c <serialEventRun+0x38>)
   d490a:	b163      	cbz	r3, d4926 <serialEventRun+0x32>
   d490c:	f000 fc94 	bl	d5238 <_Z22__fetch_global_Serial1v>
   d4910:	6803      	ldr	r3, [r0, #0]
   d4912:	691b      	ldr	r3, [r3, #16]
   d4914:	4798      	blx	r3
   d4916:	2800      	cmp	r0, #0
   d4918:	dc03      	bgt.n	d4922 <serialEventRun+0x2e>
   d491a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d491c:	f3af 8000 	nop.w
   d4920:	e7f2      	b.n	d4908 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4922:	f3af 8000 	nop.w
   d4926:	bd08      	pop	{r3, pc}
	...

000d4930 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4930:	b508      	push	{r3, lr}
	serialEventRun();
   d4932:	f7ff ffdf 	bl	d48f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4936:	f7ff fc4f 	bl	d41d8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d493a:	4b01      	ldr	r3, [pc, #4]	; (d4940 <_post_loop+0x10>)
   d493c:	6018      	str	r0, [r3, #0]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	2003e74c 	.word	0x2003e74c

000d4944 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4944:	4802      	ldr	r0, [pc, #8]	; (d4950 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4946:	4a03      	ldr	r2, [pc, #12]	; (d4954 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4948:	4903      	ldr	r1, [pc, #12]	; (d4958 <_Z33system_initialize_user_backup_ramv+0x14>)
   d494a:	1a12      	subs	r2, r2, r0
   d494c:	f000 bfc2 	b.w	d58d4 <memcpy>
   d4950:	2003f400 	.word	0x2003f400
   d4954:	2003f404 	.word	0x2003f404
   d4958:	000d5d30 	.word	0x000d5d30

000d495c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d495c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d495e:	2300      	movs	r3, #0
   d4960:	9300      	str	r3, [sp, #0]
   d4962:	461a      	mov	r2, r3
   d4964:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4968:	f7ff fd08 	bl	d437c <system_ctrl_set_result>
}
   d496c:	b003      	add	sp, #12
   d496e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4974 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4974:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4976:	8843      	ldrh	r3, [r0, #2]
   d4978:	2b0a      	cmp	r3, #10
   d497a:	d008      	beq.n	d498e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d497c:	2b50      	cmp	r3, #80	; 0x50
   d497e:	d109      	bne.n	d4994 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4980:	4b09      	ldr	r3, [pc, #36]	; (d49a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4982:	681b      	ldr	r3, [r3, #0]
   d4984:	b13b      	cbz	r3, d4996 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4986:	b003      	add	sp, #12
   d4988:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d498c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d498e:	f7ff ffe5 	bl	d495c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4992:	e006      	b.n	d49a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4994:	2300      	movs	r3, #0
   d4996:	9300      	str	r3, [sp, #0]
   d4998:	461a      	mov	r2, r3
   d499a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d499e:	f7ff fced 	bl	d437c <system_ctrl_set_result>
        break;
    }
}
   d49a2:	b003      	add	sp, #12
   d49a4:	f85d fb04 	ldr.w	pc, [sp], #4
   d49a8:	2003e428 	.word	0x2003e428

000d49ac <module_user_init_hook>:

void module_user_init_hook()
{
   d49ac:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d49ae:	4c10      	ldr	r4, [pc, #64]	; (d49f0 <module_user_init_hook+0x44>)
   d49b0:	4d10      	ldr	r5, [pc, #64]	; (d49f4 <module_user_init_hook+0x48>)
   d49b2:	6823      	ldr	r3, [r4, #0]
   d49b4:	42ab      	cmp	r3, r5
   d49b6:	4b10      	ldr	r3, [pc, #64]	; (d49f8 <module_user_init_hook+0x4c>)
   d49b8:	bf0c      	ite	eq
   d49ba:	2201      	moveq	r2, #1
   d49bc:	2200      	movne	r2, #0
   d49be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d49c0:	d002      	beq.n	d49c8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d49c2:	f7ff ffbf 	bl	d4944 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d49c6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d49c8:	f7ff fbfe 	bl	d41c8 <HAL_RNG_GetRandomNumber>
   d49cc:	4604      	mov	r4, r0
    srand(seed);
   d49ce:	f000 ff95 	bl	d58fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d49d2:	4b0a      	ldr	r3, [pc, #40]	; (d49fc <module_user_init_hook+0x50>)
   d49d4:	b113      	cbz	r3, d49dc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d49d6:	4620      	mov	r0, r4
   d49d8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d49dc:	2100      	movs	r1, #0
   d49de:	4807      	ldr	r0, [pc, #28]	; (d49fc <module_user_init_hook+0x50>)
   d49e0:	f7ff fd36 	bl	d4450 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49e4:	2100      	movs	r1, #0
   d49e6:	4806      	ldr	r0, [pc, #24]	; (d4a00 <module_user_init_hook+0x54>)
}
   d49e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49ec:	f7ff bcbc 	b.w	d4368 <system_ctrl_set_app_request_handler>
   d49f0:	2003f400 	.word	0x2003f400
   d49f4:	9a271c1e 	.word	0x9a271c1e
   d49f8:	2003e42c 	.word	0x2003e42c
   d49fc:	00000000 	.word	0x00000000
   d4a00:	000d4975 	.word	0x000d4975

000d4a04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4a04:	4770      	bx	lr

000d4a06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4a06:	2000      	movs	r0, #0
   d4a08:	4770      	bx	lr

000d4a0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4a0a:	b510      	push	{r4, lr}
   d4a0c:	2110      	movs	r1, #16
   d4a0e:	4604      	mov	r4, r0
   d4a10:	f000 fe05 	bl	d561e <_ZdlPvj>
   d4a14:	4620      	mov	r0, r4
   d4a16:	bd10      	pop	{r4, pc}

000d4a18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4a18:	b508      	push	{r3, lr}
      { delete this; }
   d4a1a:	b108      	cbz	r0, d4a20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4a1c:	f7ff fff5 	bl	d4a0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4a20:	bd08      	pop	{r3, pc}

000d4a22 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4a22:	2200      	movs	r2, #0
   d4a24:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4a26:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4a28:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4a2c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a2e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4a32:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a34:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a36:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4a38:	680c      	ldr	r4, [r1, #0]
   d4a3a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a3c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4a3e:	bd10      	pop	{r4, pc}

000d4a40 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4a40:	b510      	push	{r4, lr}
   d4a42:	4604      	mov	r4, r0
    free((void*)msg_);
   d4a44:	6800      	ldr	r0, [r0, #0]
   d4a46:	f7ff fd13 	bl	d4470 <free>
}
   d4a4a:	4620      	mov	r0, r4
   d4a4c:	bd10      	pop	{r4, pc}

000d4a4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4a4e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4a50:	68c4      	ldr	r4, [r0, #12]
   d4a52:	b1f4      	cbz	r4, d4a92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4a54:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4a56:	2b02      	cmp	r3, #2
   d4a58:	d103      	bne.n	d4a62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4a5a:	f104 000c 	add.w	r0, r4, #12
   d4a5e:	f7ff ffef 	bl	d4a40 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4a62:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4a64:	b135      	cbz	r5, d4a74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a66:	4628      	mov	r0, r5
   d4a68:	f7ff ff17 	bl	d489a <_ZNSt14_Function_baseD1Ev>
   d4a6c:	2110      	movs	r1, #16
   d4a6e:	4628      	mov	r0, r5
   d4a70:	f000 fdd5 	bl	d561e <_ZdlPvj>
   d4a74:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4a76:	b135      	cbz	r5, d4a86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4a78:	4628      	mov	r0, r5
   d4a7a:	f7ff ff0e 	bl	d489a <_ZNSt14_Function_baseD1Ev>
   d4a7e:	2110      	movs	r1, #16
   d4a80:	4628      	mov	r0, r5
   d4a82:	f000 fdcc 	bl	d561e <_ZdlPvj>
   d4a86:	4620      	mov	r0, r4
   d4a88:	2114      	movs	r1, #20
   d4a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4a8e:	f000 bdc6 	b.w	d561e <_ZdlPvj>
   d4a92:	bd38      	pop	{r3, r4, r5, pc}

000d4a94 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4a94:	b513      	push	{r0, r1, r4, lr}
   d4a96:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4a98:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4a9c:	2300      	movs	r3, #0
   d4a9e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4aa0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4aa2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4aa4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4aa6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4aa8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4aaa:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4aac:	f7ff fb1b 	bl	d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	b002      	add	sp, #8
   d4ab4:	bd10      	pop	{r4, pc}

000d4ab6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4ab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ab8:	460c      	mov	r4, r1
   d4aba:	ad02      	add	r5, sp, #8
   d4abc:	f854 3b04 	ldr.w	r3, [r4], #4
   d4ac0:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4ac4:	4606      	mov	r6, r0
   d4ac6:	460f      	mov	r7, r1
   d4ac8:	a801      	add	r0, sp, #4
   d4aca:	4621      	mov	r1, r4
   d4acc:	f7ff fe24 	bl	d4718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4ad0:	4629      	mov	r1, r5
   d4ad2:	4630      	mov	r0, r6
   d4ad4:	f7ff ffde 	bl	d4a94 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ad8:	a801      	add	r0, sp, #4
   d4ada:	f7ff fb04 	bl	d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ade:	4620      	mov	r0, r4
   d4ae0:	f7ff fb01 	bl	d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4ae4:	4638      	mov	r0, r7
   d4ae6:	2108      	movs	r1, #8
   d4ae8:	f000 fd99 	bl	d561e <_ZdlPvj>
        return p;
    }
   d4aec:	4630      	mov	r0, r6
   d4aee:	b003      	add	sp, #12
   d4af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4af4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4af4:	b538      	push	{r3, r4, r5, lr}
   d4af6:	2300      	movs	r3, #0
   d4af8:	4604      	mov	r4, r0
   d4afa:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4afc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4afe:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b00:	f7ff fac9 	bl	d4096 <_Znwj>
   d4b04:	b128      	cbz	r0, d4b12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4b06:	2301      	movs	r3, #1
   d4b08:	6043      	str	r3, [r0, #4]
   d4b0a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4b0c:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4b0e:	6003      	str	r3, [r0, #0]
   d4b10:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b12:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4b14:	4620      	mov	r0, r4
   d4b16:	bd38      	pop	{r3, r4, r5, pc}
   d4b18:	000d5b68 	.word	0x000d5b68

000d4b1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b1c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4b1e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b20:	b90a      	cbnz	r2, d4b26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4b22:	f000 fd7e 	bl	d5622 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b26:	68c3      	ldr	r3, [r0, #12]
    }
   d4b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b2c:	4718      	bx	r3

000d4b2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b2e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b30:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b32:	f100 0110 	add.w	r1, r0, #16
   d4b36:	f7ff fff1 	bl	d4b1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4b3a:	bd08      	pop	{r3, pc}

000d4b3c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b3c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4b3e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b40:	b90a      	cbnz	r2, d4b46 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4b42:	f000 fd6e 	bl	d5622 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b46:	68c3      	ldr	r3, [r0, #12]
    }
   d4b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b4c:	4718      	bx	r3

000d4b4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b4e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b50:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b52:	f100 0110 	add.w	r1, r0, #16
   d4b56:	f7ff fff1 	bl	d4b3c <_ZNKSt8functionIFvRKbEEclES1_>
   d4b5a:	bd08      	pop	{r3, pc}

000d4b5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b5c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b5e:	2300      	movs	r3, #0
   d4b60:	6083      	str	r3, [r0, #8]
   d4b62:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b64:	4604      	mov	r4, r0
   d4b66:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4b68:	b12b      	cbz	r3, d4b76 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b6a:	2202      	movs	r2, #2
   d4b6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b6e:	68eb      	ldr	r3, [r5, #12]
   d4b70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b72:	68ab      	ldr	r3, [r5, #8]
   d4b74:	60a3      	str	r3, [r4, #8]
	}
    }
   d4b76:	4620      	mov	r0, r4
   d4b78:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b7e:	b089      	sub	sp, #36	; 0x24
   d4b80:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4b82:	4668      	mov	r0, sp
   d4b84:	f7ff ff4d 	bl	d4a22 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4b88:	2300      	movs	r3, #0
   d4b8a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4b8e:	f04f 0202 	mov.w	r2, #2
   d4b92:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4b96:	2b00      	cmp	r3, #0
   d4b98:	d103      	bne.n	d4ba2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4b9a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4b9e:	2900      	cmp	r1, #0
   d4ba0:	d1f7      	bne.n	d4b92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4ba2:	d002      	beq.n	d4baa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4ba4:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ba8:	e063      	b.n	d4c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4baa:	f114 050c 	adds.w	r5, r4, #12
   d4bae:	d003      	beq.n	d4bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4bb0:	4669      	mov	r1, sp
   d4bb2:	4628      	mov	r0, r5
   d4bb4:	f7ff ff35 	bl	d4a22 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4bb8:	f3bf 8f5f 	dmb	sy
   d4bbc:	2301      	movs	r3, #1
   d4bbe:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4bc0:	2000      	movs	r0, #0
   d4bc2:	f104 0308 	add.w	r3, r4, #8
   d4bc6:	f3bf 8f5f 	dmb	sy
   d4bca:	e853 6f00 	ldrex	r6, [r3]
   d4bce:	e843 0200 	strex	r2, r0, [r3]
   d4bd2:	2a00      	cmp	r2, #0
   d4bd4:	d1f9      	bne.n	d4bca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4bd6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4bda:	2e00      	cmp	r6, #0
   d4bdc:	d049      	beq.n	d4c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4bde:	f7ff fbb3 	bl	d4348 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4be2:	b120      	cbz	r0, d4bee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4be4:	4629      	mov	r1, r5
   d4be6:	4630      	mov	r0, r6
   d4be8:	f7ff ff98 	bl	d4b1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4bec:	e03a      	b.n	d4c64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4bee:	4631      	mov	r1, r6
   d4bf0:	a802      	add	r0, sp, #8
   d4bf2:	f7ff ffb3 	bl	d4b5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4bf6:	68e0      	ldr	r0, [r4, #12]
   d4bf8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4bfc:	b108      	cbz	r0, d4c02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4bfe:	f000 fedf 	bl	d59c0 <strdup>
   d4c02:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4c04:	2010      	movs	r0, #16
   d4c06:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4c0a:	f7ff fa44 	bl	d4096 <_Znwj>
   d4c0e:	4605      	mov	r5, r0
   d4c10:	b1e8      	cbz	r0, d4c4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c12:	2700      	movs	r7, #0
   d4c14:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c16:	2018      	movs	r0, #24
   d4c18:	f7ff fa3d 	bl	d4096 <_Znwj>
   d4c1c:	4604      	mov	r4, r0
   d4c1e:	b188      	cbz	r0, d4c44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4c20:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c22:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4c24:	a802      	add	r0, sp, #8
   d4c26:	f7ff fe47 	bl	d48b8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c2a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4c2c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c2e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c30:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4c32:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c34:	a906      	add	r1, sp, #24
   d4c36:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c38:	60e3      	str	r3, [r4, #12]
   d4c3a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c3e:	9205      	str	r2, [sp, #20]
   d4c40:	f7ff feef 	bl	d4a22 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4c44:	4b0d      	ldr	r3, [pc, #52]	; (d4c7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4c46:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4c48:	4b0d      	ldr	r3, [pc, #52]	; (d4c80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c4a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4c4c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4c4e:	a806      	add	r0, sp, #24
   d4c50:	f7ff fef6 	bl	d4a40 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c54:	a802      	add	r0, sp, #8
   d4c56:	f7ff fe20 	bl	d489a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4c5a:	2200      	movs	r2, #0
   d4c5c:	4629      	mov	r1, r5
   d4c5e:	4809      	ldr	r0, [pc, #36]	; (d4c84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4c60:	f7ff fb7a 	bl	d4358 <application_thread_invoke>
   d4c64:	4630      	mov	r0, r6
   d4c66:	f7ff fe18 	bl	d489a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4c6a:	2110      	movs	r1, #16
   d4c6c:	4630      	mov	r0, r6
   d4c6e:	f000 fcd6 	bl	d561e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4c72:	4668      	mov	r0, sp
   d4c74:	f7ff fee4 	bl	d4a40 <_ZN8particle5ErrorD1Ev>
    }
   d4c78:	b009      	add	sp, #36	; 0x24
   d4c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c7c:	000d4b2f 	.word	0x000d4b2f
   d4c80:	000d4da5 	.word	0x000d4da5
   d4c84:	000d5285 	.word	0x000d5285

000d4c88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c8c:	b08b      	sub	sp, #44	; 0x2c
   d4c8e:	4606      	mov	r6, r0
   d4c90:	460f      	mov	r7, r1
   d4c92:	4690      	mov	r8, r2
   d4c94:	4699      	mov	r9, r3
   d4c96:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c9a:	f7ff fbc9 	bl	d4430 <spark_cloud_flag_connected>
   d4c9e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4ca0:	4683      	mov	fp, r0
   d4ca2:	bb30      	cbnz	r0, d4cf2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ca4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4ca8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4caa:	a905      	add	r1, sp, #20
   d4cac:	4628      	mov	r0, r5
   d4cae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4cb2:	f7ff feb6 	bl	d4a22 <_ZN8particle5ErrorC1EOS0_>
   d4cb6:	2014      	movs	r0, #20
   d4cb8:	f7ff f9ed 	bl	d4096 <_Znwj>
   d4cbc:	4604      	mov	r4, r0
   d4cbe:	b158      	cbz	r0, d4cd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4cc0:	2302      	movs	r3, #2
   d4cc2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4cc4:	2301      	movs	r3, #1
   d4cc6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4cc8:	f8c0 b004 	str.w	fp, [r0, #4]
   d4ccc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4cd0:	4629      	mov	r1, r5
   d4cd2:	300c      	adds	r0, #12
   d4cd4:	f7ff fea5 	bl	d4a22 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4cd8:	4630      	mov	r0, r6
   d4cda:	4621      	mov	r1, r4
   d4cdc:	f840 4b04 	str.w	r4, [r0], #4
   d4ce0:	f7ff ff08 	bl	d4af4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ce4:	4628      	mov	r0, r5
   d4ce6:	f7ff feab 	bl	d4a40 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4cea:	a805      	add	r0, sp, #20
   d4cec:	f7ff fea8 	bl	d4a40 <_ZN8particle5ErrorD1Ev>
   d4cf0:	e052      	b.n	d4d98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4cf2:	2400      	movs	r4, #0
   d4cf4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4cf6:	2014      	movs	r0, #20
   d4cf8:	606c      	str	r4, [r5, #4]
   d4cfa:	60ac      	str	r4, [r5, #8]
   d4cfc:	9307      	str	r3, [sp, #28]
   d4cfe:	f7ff f9ca 	bl	d4096 <_Znwj>
   d4d02:	4601      	mov	r1, r0
   d4d04:	b118      	cbz	r0, d4d0e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4d06:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4d08:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4d0a:	6044      	str	r4, [r0, #4]
   d4d0c:	6084      	str	r4, [r0, #8]
   d4d0e:	a804      	add	r0, sp, #16
   d4d10:	9103      	str	r1, [sp, #12]
   d4d12:	f7ff feef 	bl	d4af4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4d16:	4b22      	ldr	r3, [pc, #136]	; (d4da0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4d18:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4d1a:	2008      	movs	r0, #8
   d4d1c:	f7ff f9bb 	bl	d4096 <_Znwj>
   d4d20:	4604      	mov	r4, r0
   d4d22:	b128      	cbz	r0, d4d30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d24:	9b03      	ldr	r3, [sp, #12]
   d4d26:	f840 3b04 	str.w	r3, [r0], #4
   d4d2a:	a904      	add	r1, sp, #16
   d4d2c:	f7ff fcf4 	bl	d4718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d30:	9500      	str	r5, [sp, #0]
   d4d32:	fa5f f38a 	uxtb.w	r3, sl
   d4d36:	464a      	mov	r2, r9
   d4d38:	4641      	mov	r1, r8
   d4d3a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4d3c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d3e:	f7ff fb7f 	bl	d4440 <spark_send_event>
   d4d42:	b920      	cbnz	r0, d4d4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4d44:	9b03      	ldr	r3, [sp, #12]
   d4d46:	785b      	ldrb	r3, [r3, #1]
   d4d48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4d4c:	b183      	cbz	r3, d4d70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4d4e:	9b03      	ldr	r3, [sp, #12]
   d4d50:	9305      	str	r3, [sp, #20]
   d4d52:	a904      	add	r1, sp, #16
   d4d54:	a806      	add	r0, sp, #24
   d4d56:	f7ff fcdf 	bl	d4718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4d5a:	a905      	add	r1, sp, #20
   d4d5c:	4630      	mov	r0, r6
   d4d5e:	f7ff fe99 	bl	d4a94 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d62:	a806      	add	r0, sp, #24
   d4d64:	f7ff f9bf 	bl	d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d68:	a804      	add	r0, sp, #16
   d4d6a:	f7ff f9bc 	bl	d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d6e:	e013      	b.n	d4d98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4d70:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4d74:	a905      	add	r1, sp, #20
   d4d76:	a803      	add	r0, sp, #12
   d4d78:	9205      	str	r2, [sp, #20]
   d4d7a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4d7e:	f7ff fefd 	bl	d4b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4d82:	a805      	add	r0, sp, #20
   d4d84:	f7ff fe5c 	bl	d4a40 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4d88:	a805      	add	r0, sp, #20
   d4d8a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4d8c:	f7ff fe93 	bl	d4ab6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4d90:	a806      	add	r0, sp, #24
   d4d92:	f7ff f9a8 	bl	d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d96:	e7da      	b.n	d4d4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4d98:	4630      	mov	r0, r6
   d4d9a:	b00b      	add	sp, #44	; 0x2c
   d4d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4da0:	000d4f15 	.word	0x000d4f15

000d4da4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4da4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4da8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4daa:	d006      	beq.n	d4dba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4dac:	2a03      	cmp	r2, #3
   d4dae:	d017      	beq.n	d4de0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4db0:	2a01      	cmp	r2, #1
   d4db2:	d122      	bne.n	d4dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4db4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4db6:	6003      	str	r3, [r0, #0]
	      break;
   d4db8:	e01f      	b.n	d4dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4dba:	2018      	movs	r0, #24
   d4dbc:	680e      	ldr	r6, [r1, #0]
   d4dbe:	f7ff f96a 	bl	d4096 <_Znwj>
   d4dc2:	4605      	mov	r5, r0
   d4dc4:	b150      	cbz	r0, d4ddc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4dc6:	4631      	mov	r1, r6
   d4dc8:	f7ff fec8 	bl	d4b5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4dcc:	6930      	ldr	r0, [r6, #16]
   d4dce:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4dd2:	b108      	cbz	r0, d4dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4dd4:	f000 fdf4 	bl	d59c0 <strdup>
   d4dd8:	6128      	str	r0, [r5, #16]
   d4dda:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4ddc:	6025      	str	r5, [r4, #0]
   d4dde:	e00c      	b.n	d4dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4de0:	6804      	ldr	r4, [r0, #0]
   d4de2:	b154      	cbz	r4, d4dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4de4:	f104 0010 	add.w	r0, r4, #16
   d4de8:	f7ff fe2a 	bl	d4a40 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dec:	4620      	mov	r0, r4
   d4dee:	f7ff fd54 	bl	d489a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4df2:	2118      	movs	r1, #24
   d4df4:	4620      	mov	r0, r4
   d4df6:	f000 fc12 	bl	d561e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4dfa:	2000      	movs	r0, #0
   d4dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4dfe <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4dfe:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e00:	2300      	movs	r3, #0
   d4e02:	6083      	str	r3, [r0, #8]
   d4e04:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4e06:	4604      	mov	r4, r0
   d4e08:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4e0a:	b12b      	cbz	r3, d4e18 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4e0c:	2202      	movs	r2, #2
   d4e0e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4e10:	68eb      	ldr	r3, [r5, #12]
   d4e12:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4e14:	68ab      	ldr	r3, [r5, #8]
   d4e16:	60a3      	str	r3, [r4, #8]
	}
    }
   d4e18:	4620      	mov	r0, r4
   d4e1a:	bd38      	pop	{r3, r4, r5, pc}

000d4e1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e1c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4e1e:	b570      	push	{r4, r5, r6, lr}
   d4e20:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e22:	d006      	beq.n	d4e32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4e24:	2a03      	cmp	r2, #3
   d4e26:	d011      	beq.n	d4e4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4e28:	2a01      	cmp	r2, #1
   d4e2a:	d118      	bne.n	d4e5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e2c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4e2e:	6003      	str	r3, [r0, #0]
	      break;
   d4e30:	e015      	b.n	d4e5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e32:	2014      	movs	r0, #20
   d4e34:	680e      	ldr	r6, [r1, #0]
   d4e36:	f7ff f92e 	bl	d4096 <_Znwj>
   d4e3a:	4605      	mov	r5, r0
   d4e3c:	b120      	cbz	r0, d4e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4e3e:	4631      	mov	r1, r6
   d4e40:	f7ff ffdd 	bl	d4dfe <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4e44:	7c33      	ldrb	r3, [r6, #16]
   d4e46:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e48:	6025      	str	r5, [r4, #0]
   d4e4a:	e008      	b.n	d4e5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e4c:	6804      	ldr	r4, [r0, #0]
   d4e4e:	b134      	cbz	r4, d4e5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e50:	4620      	mov	r0, r4
   d4e52:	f7ff fd22 	bl	d489a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e56:	2114      	movs	r1, #20
   d4e58:	4620      	mov	r0, r4
   d4e5a:	f000 fbe0 	bl	d561e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4e5e:	2000      	movs	r0, #0
   d4e60:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4e64:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4e66:	2300      	movs	r3, #0
   d4e68:	b087      	sub	sp, #28
   d4e6a:	460c      	mov	r4, r1
   d4e6c:	f3bf 8f5f 	dmb	sy
   d4e70:	e850 6f00 	ldrex	r6, [r0]
   d4e74:	e840 3200 	strex	r2, r3, [r0]
   d4e78:	2a00      	cmp	r2, #0
   d4e7a:	d1f9      	bne.n	d4e70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4e7c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e80:	2e00      	cmp	r6, #0
   d4e82:	d03f      	beq.n	d4f04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e84:	4618      	mov	r0, r3
   d4e86:	f7ff fa5f 	bl	d4348 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e8a:	4607      	mov	r7, r0
   d4e8c:	b120      	cbz	r0, d4e98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e8e:	4621      	mov	r1, r4
   d4e90:	4630      	mov	r0, r6
   d4e92:	f7ff fe53 	bl	d4b3c <_ZNKSt8functionIFvRKbEEclES1_>
   d4e96:	e02e      	b.n	d4ef6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e98:	4631      	mov	r1, r6
   d4e9a:	a801      	add	r0, sp, #4
   d4e9c:	f7ff ffaf 	bl	d4dfe <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4ea0:	7823      	ldrb	r3, [r4, #0]
   d4ea2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4ea6:	2010      	movs	r0, #16
   d4ea8:	f7ff f8f5 	bl	d4096 <_Znwj>
   d4eac:	4605      	mov	r5, r0
   d4eae:	b1d0      	cbz	r0, d4ee6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4eb0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4eb2:	2014      	movs	r0, #20
   d4eb4:	f7ff f8ef 	bl	d4096 <_Znwj>
   d4eb8:	4604      	mov	r4, r0
   d4eba:	b178      	cbz	r0, d4edc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ebc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4ebe:	4601      	mov	r1, r0
   d4ec0:	a801      	add	r0, sp, #4
   d4ec2:	f7ff fcf9 	bl	d48b8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ec6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4ec8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eca:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ecc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4ece:	9203      	str	r2, [sp, #12]
   d4ed0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ed2:	60e3      	str	r3, [r4, #12]
   d4ed4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ed8:	9204      	str	r2, [sp, #16]
   d4eda:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4edc:	4b0a      	ldr	r3, [pc, #40]	; (d4f08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4ede:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ee0:	4b0a      	ldr	r3, [pc, #40]	; (d4f0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ee2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ee4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ee6:	a801      	add	r0, sp, #4
   d4ee8:	f7ff fcd7 	bl	d489a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4eec:	2200      	movs	r2, #0
   d4eee:	4629      	mov	r1, r5
   d4ef0:	4807      	ldr	r0, [pc, #28]	; (d4f10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4ef2:	f7ff fa31 	bl	d4358 <application_thread_invoke>
   d4ef6:	4630      	mov	r0, r6
   d4ef8:	f7ff fccf 	bl	d489a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4efc:	2110      	movs	r1, #16
   d4efe:	4630      	mov	r0, r6
   d4f00:	f000 fb8d 	bl	d561e <_ZdlPvj>
        }
    }
   d4f04:	b007      	add	sp, #28
   d4f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f08:	000d4b4f 	.word	0x000d4b4f
   d4f0c:	000d4e1d 	.word	0x000d4e1d
   d4f10:	000d5285 	.word	0x000d5285

000d4f14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4f14:	b530      	push	{r4, r5, lr}
   d4f16:	b085      	sub	sp, #20
   d4f18:	4604      	mov	r4, r0
   d4f1a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4f1c:	4668      	mov	r0, sp
   d4f1e:	4611      	mov	r1, r2
   d4f20:	f7ff fdc9 	bl	d4ab6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4f24:	b17c      	cbz	r4, d4f46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4f26:	b224      	sxth	r4, r4
   d4f28:	4628      	mov	r0, r5
   d4f2a:	b10d      	cbz	r5, d4f30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4f2c:	f000 fd48 	bl	d59c0 <strdup>
   d4f30:	9002      	str	r0, [sp, #8]
   d4f32:	a902      	add	r1, sp, #8
   d4f34:	4668      	mov	r0, sp
   d4f36:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4f3a:	f7ff fe1f 	bl	d4b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f3e:	a802      	add	r0, sp, #8
   d4f40:	f7ff fd7e 	bl	d4a40 <_ZN8particle5ErrorD1Ev>
   d4f44:	e01d      	b.n	d4f82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4f46:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4f48:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4f4c:	f04f 0201 	mov.w	r2, #1
   d4f50:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4f54:	42a3      	cmp	r3, r4
   d4f56:	d103      	bne.n	d4f60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4f58:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4f5c:	2900      	cmp	r1, #0
   d4f5e:	d1f7      	bne.n	d4f50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4f60:	d002      	beq.n	d4f68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4f62:	f88d 3008 	strb.w	r3, [sp, #8]
   d4f66:	e00c      	b.n	d4f82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4f68:	f110 010c 	adds.w	r1, r0, #12
   d4f6c:	f04f 0301 	mov.w	r3, #1
   d4f70:	bf18      	it	ne
   d4f72:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4f74:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4f78:	3004      	adds	r0, #4
   d4f7a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4f7e:	f7ff ff71 	bl	d4e64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4f82:	a801      	add	r0, sp, #4
   d4f84:	f7ff f8af 	bl	d40e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4f88:	b005      	add	sp, #20
   d4f8a:	bd30      	pop	{r4, r5, pc}

000d4f8c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4f8c:	4770      	bx	lr

000d4f8e <_ZN9IPAddressD0Ev>:
   d4f8e:	b510      	push	{r4, lr}
   d4f90:	2118      	movs	r1, #24
   d4f92:	4604      	mov	r4, r0
   d4f94:	f000 fb43 	bl	d561e <_ZdlPvj>
   d4f98:	4620      	mov	r0, r4
   d4f9a:	bd10      	pop	{r4, pc}

000d4f9c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f9e:	7d03      	ldrb	r3, [r0, #20]
   d4fa0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fa2:	b08d      	sub	sp, #52	; 0x34
   d4fa4:	460e      	mov	r6, r1
   d4fa6:	f100 0704 	add.w	r7, r0, #4
   d4faa:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fae:	d002      	beq.n	d4fb6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4fb0:	f100 0508 	add.w	r5, r0, #8
   d4fb4:	e018      	b.n	d4fe8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fb6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fb8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fba:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fbe:	232f      	movs	r3, #47	; 0x2f
   d4fc0:	462a      	mov	r2, r5
   d4fc2:	200a      	movs	r0, #10
   d4fc4:	f7ff f938 	bl	d4238 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4fc8:	4628      	mov	r0, r5
   d4fca:	f000 fd14 	bl	d59f6 <strlen>
   d4fce:	6833      	ldr	r3, [r6, #0]
   d4fd0:	4602      	mov	r2, r0
   d4fd2:	68db      	ldr	r3, [r3, #12]
   d4fd4:	4629      	mov	r1, r5
   d4fd6:	4630      	mov	r0, r6
   d4fd8:	4798      	blx	r3
   d4fda:	e00f      	b.n	d4ffc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4fdc:	b124      	cbz	r4, d4fe8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4fde:	212e      	movs	r1, #46	; 0x2e
   d4fe0:	4630      	mov	r0, r6
   d4fe2:	f7ff fbdb 	bl	d479c <_ZN5Print5printEc>
   d4fe6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4fe8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4fec:	220a      	movs	r2, #10
   d4fee:	4630      	mov	r0, r6
   d4ff0:	f7ff fbe3 	bl	d47ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ff4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ff6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ff8:	d1f0      	bne.n	d4fdc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ffa:	4620      	mov	r0, r4
    }
    return n;
}
   d4ffc:	b00d      	add	sp, #52	; 0x34
   d4ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5000 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5000:	b510      	push	{r4, lr}
   d5002:	4b05      	ldr	r3, [pc, #20]	; (d5018 <_ZN9IPAddressC1Ev+0x18>)
   d5004:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5006:	2211      	movs	r2, #17
   d5008:	f840 3b04 	str.w	r3, [r0], #4
   d500c:	2100      	movs	r1, #0
   d500e:	f000 fc6c 	bl	d58ea <memset>
{
    clear();
}
   d5012:	4620      	mov	r0, r4
   d5014:	bd10      	pop	{r4, pc}
   d5016:	bf00      	nop
   d5018:	000d5b84 	.word	0x000d5b84

000d501c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d501c:	4603      	mov	r3, r0
   d501e:	4a07      	ldr	r2, [pc, #28]	; (d503c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5020:	b510      	push	{r4, lr}
   d5022:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5026:	f101 0210 	add.w	r2, r1, #16
   d502a:	f851 4b04 	ldr.w	r4, [r1], #4
   d502e:	f843 4b04 	str.w	r4, [r3], #4
   d5032:	4291      	cmp	r1, r2
   d5034:	d1f9      	bne.n	d502a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5036:	780a      	ldrb	r2, [r1, #0]
   d5038:	701a      	strb	r2, [r3, #0]
}
   d503a:	bd10      	pop	{r4, pc}
   d503c:	000d5b84 	.word	0x000d5b84

000d5040 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5040:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5042:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5046:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d504a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d504e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5052:	2304      	movs	r3, #4
   d5054:	6041      	str	r1, [r0, #4]
   d5056:	7503      	strb	r3, [r0, #20]
   d5058:	bd10      	pop	{r4, pc}

000d505a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d505a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d505c:	780d      	ldrb	r5, [r1, #0]
   d505e:	788b      	ldrb	r3, [r1, #2]
   d5060:	784a      	ldrb	r2, [r1, #1]
   d5062:	78c9      	ldrb	r1, [r1, #3]
   d5064:	9100      	str	r1, [sp, #0]
   d5066:	4629      	mov	r1, r5
   d5068:	f7ff ffea 	bl	d5040 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d506c:	b003      	add	sp, #12
   d506e:	bd30      	pop	{r4, r5, pc}

000d5070 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5070:	7441      	strb	r1, [r0, #17]
   d5072:	4770      	bx	lr

000d5074 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5074:	4770      	bx	lr

000d5076 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5076:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5078:	2100      	movs	r1, #0
   d507a:	7c00      	ldrb	r0, [r0, #16]
   d507c:	f7ff f93c 	bl	d42f8 <HAL_USB_USART_Receive_Data>
}
   d5080:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5084:	bf28      	it	cs
   d5086:	f04f 30ff 	movcs.w	r0, #4294967295
   d508a:	bd08      	pop	{r3, pc}

000d508c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d508c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d508e:	2101      	movs	r1, #1
   d5090:	7c00      	ldrb	r0, [r0, #16]
   d5092:	f7ff f931 	bl	d42f8 <HAL_USB_USART_Receive_Data>
}
   d5096:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d509a:	bf28      	it	cs
   d509c:	f04f 30ff 	movcs.w	r0, #4294967295
   d50a0:	bd08      	pop	{r3, pc}

000d50a2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d50a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d50a4:	7c00      	ldrb	r0, [r0, #16]
   d50a6:	f7ff f91f 	bl	d42e8 <HAL_USB_USART_Available_Data_For_Write>
}
   d50aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50ae:	bd08      	pop	{r3, pc}

000d50b0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d50b0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d50b2:	7c00      	ldrb	r0, [r0, #16]
   d50b4:	f7ff f910 	bl	d42d8 <HAL_USB_USART_Available_Data>
}
   d50b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50bc:	bd08      	pop	{r3, pc}

000d50be <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d50be:	7c00      	ldrb	r0, [r0, #16]
   d50c0:	f7ff b92a 	b.w	d4318 <HAL_USB_USART_Flush_Data>

000d50c4 <_ZN9USBSerialD0Ev>:
   d50c4:	b510      	push	{r4, lr}
   d50c6:	2114      	movs	r1, #20
   d50c8:	4604      	mov	r4, r0
   d50ca:	f000 faa8 	bl	d561e <_ZdlPvj>
   d50ce:	4620      	mov	r0, r4
   d50d0:	bd10      	pop	{r4, pc}

000d50d2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d50d2:	b538      	push	{r3, r4, r5, lr}
   d50d4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d50d6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d50d8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d50da:	f7ff f905 	bl	d42e8 <HAL_USB_USART_Available_Data_For_Write>
   d50de:	2800      	cmp	r0, #0
   d50e0:	dc01      	bgt.n	d50e6 <_ZN9USBSerial5writeEh+0x14>
   d50e2:	7c60      	ldrb	r0, [r4, #17]
   d50e4:	b128      	cbz	r0, d50f2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d50e6:	4629      	mov	r1, r5
   d50e8:	7c20      	ldrb	r0, [r4, #16]
   d50ea:	f7ff f90d 	bl	d4308 <HAL_USB_USART_Send_Data>
   d50ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d50f2:	bd38      	pop	{r3, r4, r5, pc}

000d50f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d50f4:	b510      	push	{r4, lr}
   d50f6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d50f8:	2300      	movs	r3, #0
   d50fa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d50fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5100:	60a3      	str	r3, [r4, #8]
   d5102:	4b05      	ldr	r3, [pc, #20]	; (d5118 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5104:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5106:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5108:	4608      	mov	r0, r1
{
  _serial = serial;
   d510a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d510c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d510e:	4611      	mov	r1, r2
   d5110:	f7ff f8da 	bl	d42c8 <HAL_USB_USART_Init>
}
   d5114:	4620      	mov	r0, r4
   d5116:	bd10      	pop	{r4, pc}
   d5118:	000d5b98 	.word	0x000d5b98

000d511c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d511c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d511e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5120:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5122:	2100      	movs	r1, #0
   d5124:	f000 fbe1 	bl	d58ea <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5128:	4620      	mov	r0, r4
   d512a:	bd10      	pop	{r4, pc}

000d512c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d512c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d512e:	4d0e      	ldr	r5, [pc, #56]	; (d5168 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5130:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5132:	a801      	add	r0, sp, #4
   d5134:	f7ff fff2 	bl	d511c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5138:	6829      	ldr	r1, [r5, #0]
   d513a:	f011 0401 	ands.w	r4, r1, #1
   d513e:	d110      	bne.n	d5162 <_Z16_fetch_usbserialv+0x36>
   d5140:	4628      	mov	r0, r5
   d5142:	f7fe ffae 	bl	d40a2 <__cxa_guard_acquire>
   d5146:	b160      	cbz	r0, d5162 <_Z16_fetch_usbserialv+0x36>
   d5148:	aa01      	add	r2, sp, #4
   d514a:	4621      	mov	r1, r4
   d514c:	4807      	ldr	r0, [pc, #28]	; (d516c <_Z16_fetch_usbserialv+0x40>)
   d514e:	f7ff ffd1 	bl	d50f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5152:	4628      	mov	r0, r5
   d5154:	f7fe ffaa 	bl	d40ac <__cxa_guard_release>
   d5158:	4a05      	ldr	r2, [pc, #20]	; (d5170 <_Z16_fetch_usbserialv+0x44>)
   d515a:	4906      	ldr	r1, [pc, #24]	; (d5174 <_Z16_fetch_usbserialv+0x48>)
   d515c:	4803      	ldr	r0, [pc, #12]	; (d516c <_Z16_fetch_usbserialv+0x40>)
   d515e:	f000 fa59 	bl	d5614 <__aeabi_atexit>
	return _usbserial;
}
   d5162:	4802      	ldr	r0, [pc, #8]	; (d516c <_Z16_fetch_usbserialv+0x40>)
   d5164:	b007      	add	sp, #28
   d5166:	bd30      	pop	{r4, r5, pc}
   d5168:	2003e430 	.word	0x2003e430
   d516c:	2003e434 	.word	0x2003e434
   d5170:	2003e3f0 	.word	0x2003e3f0
   d5174:	000d5075 	.word	0x000d5075

000d5178 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5178:	4770      	bx	lr

000d517a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d517a:	7441      	strb	r1, [r0, #17]
   d517c:	4770      	bx	lr

000d517e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d517e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5180:	7c00      	ldrb	r0, [r0, #16]
   d5182:	f7ff f891 	bl	d42a8 <HAL_USART_Available_Data_For_Write>
}
   d5186:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d518a:	bd08      	pop	{r3, pc}

000d518c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d518c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d518e:	7c00      	ldrb	r0, [r0, #16]
   d5190:	f7ff f86a 	bl	d4268 <HAL_USART_Available_Data>
}
   d5194:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5198:	bd08      	pop	{r3, pc}

000d519a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d519a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d519c:	7c00      	ldrb	r0, [r0, #16]
   d519e:	f7ff f873 	bl	d4288 <HAL_USART_Peek_Data>
}
   d51a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d51a6:	bf28      	it	cs
   d51a8:	f04f 30ff 	movcs.w	r0, #4294967295
   d51ac:	bd08      	pop	{r3, pc}

000d51ae <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d51ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d51b0:	7c00      	ldrb	r0, [r0, #16]
   d51b2:	f7ff f861 	bl	d4278 <HAL_USART_Read_Data>
}
   d51b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d51ba:	bf28      	it	cs
   d51bc:	f04f 30ff 	movcs.w	r0, #4294967295
   d51c0:	bd08      	pop	{r3, pc}

000d51c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d51c2:	7c00      	ldrb	r0, [r0, #16]
   d51c4:	f7ff b868 	b.w	d4298 <HAL_USART_Flush_Data>

000d51c8 <_ZN11USARTSerialD0Ev>:
   d51c8:	b510      	push	{r4, lr}
   d51ca:	2114      	movs	r1, #20
   d51cc:	4604      	mov	r4, r0
   d51ce:	f000 fa26 	bl	d561e <_ZdlPvj>
   d51d2:	4620      	mov	r0, r4
   d51d4:	bd10      	pop	{r4, pc}

000d51d6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d51d6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51d8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d51da:	4604      	mov	r4, r0
   d51dc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51de:	b925      	cbnz	r5, d51ea <_ZN11USARTSerial5writeEh+0x14>
   d51e0:	7c00      	ldrb	r0, [r0, #16]
   d51e2:	f7ff f861 	bl	d42a8 <HAL_USART_Available_Data_For_Write>
   d51e6:	2800      	cmp	r0, #0
   d51e8:	dd05      	ble.n	d51f6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51ea:	4631      	mov	r1, r6
   d51ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d51ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51f2:	f7ff b831 	b.w	d4258 <HAL_USART_Write_Data>
  }
  return 0;
}
   d51f6:	4628      	mov	r0, r5
   d51f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d51fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d51fc:	b510      	push	{r4, lr}
   d51fe:	4604      	mov	r4, r0
   d5200:	4608      	mov	r0, r1
   d5202:	4611      	mov	r1, r2
   d5204:	2200      	movs	r2, #0
   d5206:	6062      	str	r2, [r4, #4]
   d5208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d520c:	60a2      	str	r2, [r4, #8]
   d520e:	4a05      	ldr	r2, [pc, #20]	; (d5224 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5210:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5212:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5214:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5216:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5218:	461a      	mov	r2, r3
   d521a:	f7ff f815 	bl	d4248 <HAL_USART_Init>
}
   d521e:	4620      	mov	r0, r4
   d5220:	bd10      	pop	{r4, pc}
   d5222:	bf00      	nop
   d5224:	000d5bc8 	.word	0x000d5bc8

000d5228 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d5228:	2300      	movs	r3, #0
   d522a:	7c00      	ldrb	r0, [r0, #16]
   d522c:	f7ff b844 	b.w	d42b8 <HAL_USART_BeginConfig>

000d5230 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d5230:	2200      	movs	r2, #0
   d5232:	f7ff bff9 	b.w	d5228 <_ZN11USARTSerial5beginEmm>
	...

000d5238 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5238:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d523a:	4d0c      	ldr	r5, [pc, #48]	; (d526c <_Z22__fetch_global_Serial1v+0x34>)
   d523c:	6829      	ldr	r1, [r5, #0]
   d523e:	f011 0401 	ands.w	r4, r1, #1
   d5242:	d111      	bne.n	d5268 <_Z22__fetch_global_Serial1v+0x30>
   d5244:	4628      	mov	r0, r5
   d5246:	f7fe ff2c 	bl	d40a2 <__cxa_guard_acquire>
   d524a:	b168      	cbz	r0, d5268 <_Z22__fetch_global_Serial1v+0x30>
   d524c:	4a08      	ldr	r2, [pc, #32]	; (d5270 <_Z22__fetch_global_Serial1v+0x38>)
   d524e:	4b09      	ldr	r3, [pc, #36]	; (d5274 <_Z22__fetch_global_Serial1v+0x3c>)
   d5250:	4809      	ldr	r0, [pc, #36]	; (d5278 <_Z22__fetch_global_Serial1v+0x40>)
   d5252:	4621      	mov	r1, r4
   d5254:	f7ff ffd2 	bl	d51fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5258:	4628      	mov	r0, r5
   d525a:	f7fe ff27 	bl	d40ac <__cxa_guard_release>
   d525e:	4a07      	ldr	r2, [pc, #28]	; (d527c <_Z22__fetch_global_Serial1v+0x44>)
   d5260:	4907      	ldr	r1, [pc, #28]	; (d5280 <_Z22__fetch_global_Serial1v+0x48>)
   d5262:	4805      	ldr	r0, [pc, #20]	; (d5278 <_Z22__fetch_global_Serial1v+0x40>)
   d5264:	f000 f9d6 	bl	d5614 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5268:	4803      	ldr	r0, [pc, #12]	; (d5278 <_Z22__fetch_global_Serial1v+0x40>)
   d526a:	bd38      	pop	{r3, r4, r5, pc}
   d526c:	2003e4e0 	.word	0x2003e4e0
   d5270:	2003e4e4 	.word	0x2003e4e4
   d5274:	2003e45c 	.word	0x2003e45c
   d5278:	2003e448 	.word	0x2003e448
   d527c:	2003e3f0 	.word	0x2003e3f0
   d5280:	000d5179 	.word	0x000d5179

000d5284 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5284:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5286:	6883      	ldr	r3, [r0, #8]
   d5288:	4604      	mov	r4, r0
   d528a:	b90b      	cbnz	r3, d5290 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d528c:	f000 f9c9 	bl	d5622 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5290:	68c3      	ldr	r3, [r0, #12]
   d5292:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5294:	68a3      	ldr	r3, [r4, #8]
   d5296:	b11b      	cbz	r3, d52a0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5298:	2203      	movs	r2, #3
   d529a:	4621      	mov	r1, r4
   d529c:	4620      	mov	r0, r4
   d529e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d52a0:	4620      	mov	r0, r4
   d52a2:	2110      	movs	r1, #16
}
   d52a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d52a8:	f000 b9b9 	b.w	d561e <_ZdlPvj>

000d52ac <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d52ac:	b510      	push	{r4, lr}
  if (0 == max) {
   d52ae:	4604      	mov	r4, r0
   d52b0:	b130      	cbz	r0, d52c0 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d52b2:	f000 fb4b 	bl	d594c <rand>
   d52b6:	fb90 f3f4 	sdiv	r3, r0, r4
   d52ba:	fb03 0014 	mls	r0, r3, r4, r0
   d52be:	bd10      	pop	{r4, pc}
}
   d52c0:	bd10      	pop	{r4, pc}

000d52c2 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d52c2:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d52c4:	b510      	push	{r4, lr}
   d52c6:	4604      	mov	r4, r0
  if (min >= max) {
   d52c8:	da04      	bge.n	d52d4 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d52ca:	1a08      	subs	r0, r1, r0
   d52cc:	f7ff ffee 	bl	d52ac <_Z6randomi>
   d52d0:	4420      	add	r0, r4
   d52d2:	bd10      	pop	{r4, pc}
}
   d52d4:	bd10      	pop	{r4, pc}

000d52d6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52d6:	2200      	movs	r2, #0
   d52d8:	4611      	mov	r1, r2
   d52da:	6840      	ldr	r0, [r0, #4]
   d52dc:	f7ff b890 	b.w	d4400 <network_listening>

000d52e0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d52e0:	2200      	movs	r2, #0
   d52e2:	4611      	mov	r1, r2
   d52e4:	6840      	ldr	r0, [r0, #4]
   d52e6:	f7ff b89b 	b.w	d4420 <network_get_listen_timeout>

000d52ea <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d52ea:	2200      	movs	r2, #0
   d52ec:	6840      	ldr	r0, [r0, #4]
   d52ee:	f7ff b88f 	b.w	d4410 <network_set_listen_timeout>

000d52f2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d52f2:	2200      	movs	r2, #0
   d52f4:	f081 0101 	eor.w	r1, r1, #1
   d52f8:	6840      	ldr	r0, [r0, #4]
   d52fa:	f7ff b879 	b.w	d43f0 <network_listen>

000d52fe <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d52fe:	2300      	movs	r3, #0
   d5300:	461a      	mov	r2, r3
   d5302:	2101      	movs	r1, #1
   d5304:	6840      	ldr	r0, [r0, #4]
   d5306:	f7ff b86b 	b.w	d43e0 <network_off>

000d530a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d530a:	2300      	movs	r3, #0
   d530c:	461a      	mov	r2, r3
   d530e:	4619      	mov	r1, r3
   d5310:	6840      	ldr	r0, [r0, #4]
   d5312:	f7ff b85d 	b.w	d43d0 <network_on>

000d5316 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5316:	2200      	movs	r2, #0
   d5318:	4611      	mov	r1, r2
   d531a:	6840      	ldr	r0, [r0, #4]
   d531c:	f7ff b850 	b.w	d43c0 <network_ready>

000d5320 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5320:	2200      	movs	r2, #0
   d5322:	4611      	mov	r1, r2
   d5324:	6840      	ldr	r0, [r0, #4]
   d5326:	f7ff b83b 	b.w	d43a0 <network_connecting>

000d532a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d532a:	2200      	movs	r2, #0
   d532c:	2102      	movs	r1, #2
   d532e:	6840      	ldr	r0, [r0, #4]
   d5330:	f7ff b83e 	b.w	d43b0 <network_disconnect>

000d5334 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5334:	2300      	movs	r3, #0
   d5336:	461a      	mov	r2, r3
   d5338:	6840      	ldr	r0, [r0, #4]
   d533a:	f7ff b829 	b.w	d4390 <network_connect>

000d533e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d533e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5340:	4605      	mov	r5, r0
   d5342:	b188      	cbz	r0, d5368 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5344:	6804      	ldr	r4, [r0, #0]
   d5346:	b14c      	cbz	r4, d535c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5348:	68a3      	ldr	r3, [r4, #8]
   d534a:	b11b      	cbz	r3, d5354 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d534c:	2203      	movs	r2, #3
   d534e:	4621      	mov	r1, r4
   d5350:	4620      	mov	r0, r4
   d5352:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5354:	2110      	movs	r1, #16
   d5356:	4620      	mov	r0, r4
   d5358:	f000 f961 	bl	d561e <_ZdlPvj>
   d535c:	4628      	mov	r0, r5
   d535e:	2114      	movs	r1, #20
      }
   d5360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5364:	f000 b95b 	b.w	d561e <_ZdlPvj>
   d5368:	bd38      	pop	{r3, r4, r5, pc}

000d536a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d536a:	b110      	cbz	r0, d5372 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d536c:	6803      	ldr	r3, [r0, #0]
   d536e:	685b      	ldr	r3, [r3, #4]
   d5370:	4718      	bx	r3
   d5372:	4770      	bx	lr

000d5374 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5374:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5376:	6803      	ldr	r3, [r0, #0]
   d5378:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d537a:	b1bb      	cbz	r3, d53ac <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d537c:	6858      	ldr	r0, [r3, #4]
   d537e:	f7fe ff33 	bl	d41e8 <os_thread_is_current>
   d5382:	b978      	cbnz	r0, d53a4 <_ZN6ThreadD1Ev+0x30>
   d5384:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5386:	7c5a      	ldrb	r2, [r3, #17]
   d5388:	b912      	cbnz	r2, d5390 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d538a:	6858      	ldr	r0, [r3, #4]
   d538c:	f7fe ff34 	bl	d41f8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5390:	6823      	ldr	r3, [r4, #0]
   d5392:	6858      	ldr	r0, [r3, #4]
   d5394:	f7fe ff38 	bl	d4208 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5398:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d539a:	2300      	movs	r3, #0
   d539c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d539e:	b128      	cbz	r0, d53ac <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d53a0:	f7ff ffcd 	bl	d533e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53a4:	6820      	ldr	r0, [r4, #0]
   d53a6:	b108      	cbz	r0, d53ac <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d53a8:	f7ff ffc9 	bl	d533e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d53ac:	4620      	mov	r0, r4
   d53ae:	bd10      	pop	{r4, pc}

000d53b0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d53b0:	b538      	push	{r3, r4, r5, lr}
   d53b2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53b4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d53b8:	b108      	cbz	r0, d53be <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d53ba:	f7fe fe70 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d53be:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d53c2:	b108      	cbz	r0, d53c8 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d53c4:	f7fe ff30 	bl	d4228 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53c8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d53cc:	b135      	cbz	r5, d53dc <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d53ce:	4628      	mov	r0, r5
   d53d0:	f7ff ffd0 	bl	d5374 <_ZN6ThreadD1Ev>
   d53d4:	2104      	movs	r1, #4
   d53d6:	4628      	mov	r0, r5
   d53d8:	f000 f921 	bl	d561e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53dc:	6820      	ldr	r0, [r4, #0]
   d53de:	b108      	cbz	r0, d53e4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d53e0:	f7ff ffc3 	bl	d536a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d53e4:	4620      	mov	r0, r4
   d53e6:	bd38      	pop	{r3, r4, r5, pc}

000d53e8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d53e8:	b510      	push	{r4, lr}
   d53ea:	4b04      	ldr	r3, [pc, #16]	; (d53fc <_ZN5spark9MeshClassD1Ev+0x14>)
   d53ec:	4604      	mov	r4, r0
   d53ee:	f840 3b08 	str.w	r3, [r0], #8
   d53f2:	f7ff ffdd 	bl	d53b0 <_ZN5spark11MeshPublishD1Ev>
   d53f6:	4620      	mov	r0, r4
   d53f8:	bd10      	pop	{r4, pc}
   d53fa:	bf00      	nop
   d53fc:	000d5bf8 	.word	0x000d5bf8

000d5400 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5400:	b538      	push	{r3, r4, r5, lr}
   d5402:	4c0e      	ldr	r4, [pc, #56]	; (d543c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5404:	4b0e      	ldr	r3, [pc, #56]	; (d5440 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5406:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5408:	2500      	movs	r5, #0
   d540a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d540c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5410:	6063      	str	r3, [r4, #4]
   d5412:	60a5      	str	r5, [r4, #8]
   d5414:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5418:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d541c:	f7fe fefc 	bl	d4218 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5420:	4b08      	ldr	r3, [pc, #32]	; (d5444 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5422:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5426:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d542a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d542c:	4620      	mov	r0, r4
   d542e:	4a06      	ldr	r2, [pc, #24]	; (d5448 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5430:	4906      	ldr	r1, [pc, #24]	; (d544c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5436:	f000 b8ed 	b.w	d5614 <__aeabi_atexit>
   d543a:	bf00      	nop
   d543c:	2003e568 	.word	0x2003e568
   d5440:	000d5c60 	.word	0x000d5c60
   d5444:	000d5bf8 	.word	0x000d5bf8
   d5448:	2003e3f0 	.word	0x2003e3f0
   d544c:	000d53e9 	.word	0x000d53e9

000d5450 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5450:	2200      	movs	r2, #0
   d5452:	4611      	mov	r1, r2
   d5454:	6840      	ldr	r0, [r0, #4]
   d5456:	f7fe bfb3 	b.w	d43c0 <network_ready>

000d545a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d545a:	2200      	movs	r2, #0
   d545c:	4611      	mov	r1, r2
   d545e:	6840      	ldr	r0, [r0, #4]
   d5460:	f7fe bfce 	b.w	d4400 <network_listening>

000d5464 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5464:	2200      	movs	r2, #0
   d5466:	4611      	mov	r1, r2
   d5468:	6840      	ldr	r0, [r0, #4]
   d546a:	f7fe bfd9 	b.w	d4420 <network_get_listen_timeout>

000d546e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d546e:	2200      	movs	r2, #0
   d5470:	6840      	ldr	r0, [r0, #4]
   d5472:	f7fe bfcd 	b.w	d4410 <network_set_listen_timeout>

000d5476 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5476:	2200      	movs	r2, #0
   d5478:	f081 0101 	eor.w	r1, r1, #1
   d547c:	6840      	ldr	r0, [r0, #4]
   d547e:	f7fe bfb7 	b.w	d43f0 <network_listen>

000d5482 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5482:	2300      	movs	r3, #0
   d5484:	461a      	mov	r2, r3
   d5486:	4619      	mov	r1, r3
   d5488:	6840      	ldr	r0, [r0, #4]
   d548a:	f7fe bfa9 	b.w	d43e0 <network_off>

000d548e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d548e:	2300      	movs	r3, #0
   d5490:	461a      	mov	r2, r3
   d5492:	4619      	mov	r1, r3
   d5494:	6840      	ldr	r0, [r0, #4]
   d5496:	f7fe bf9b 	b.w	d43d0 <network_on>

000d549a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d549a:	2200      	movs	r2, #0
   d549c:	4611      	mov	r1, r2
   d549e:	6840      	ldr	r0, [r0, #4]
   d54a0:	f7fe bf7e 	b.w	d43a0 <network_connecting>

000d54a4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54a4:	2200      	movs	r2, #0
   d54a6:	2102      	movs	r1, #2
   d54a8:	6840      	ldr	r0, [r0, #4]
   d54aa:	f7fe bf81 	b.w	d43b0 <network_disconnect>

000d54ae <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54ae:	2300      	movs	r3, #0
   d54b0:	461a      	mov	r2, r3
   d54b2:	6840      	ldr	r0, [r0, #4]
   d54b4:	f7fe bf6c 	b.w	d4390 <network_connect>

000d54b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d54b8:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d54ba:	2204      	movs	r2, #4
   d54bc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d54be:	4a02      	ldr	r2, [pc, #8]	; (d54c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d54c0:	601a      	str	r2, [r3, #0]
   d54c2:	4770      	bx	lr
   d54c4:	2003e73c 	.word	0x2003e73c
   d54c8:	000d5c2c 	.word	0x000d5c2c

000d54cc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d54cc:	2300      	movs	r3, #0
   d54ce:	461a      	mov	r2, r3
   d54d0:	6840      	ldr	r0, [r0, #4]
   d54d2:	f7fe bf5d 	b.w	d4390 <network_connect>

000d54d6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d54d6:	2200      	movs	r2, #0
   d54d8:	2102      	movs	r1, #2
   d54da:	6840      	ldr	r0, [r0, #4]
   d54dc:	f7fe bf68 	b.w	d43b0 <network_disconnect>

000d54e0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d54e0:	2200      	movs	r2, #0
   d54e2:	4611      	mov	r1, r2
   d54e4:	6840      	ldr	r0, [r0, #4]
   d54e6:	f7fe bf5b 	b.w	d43a0 <network_connecting>

000d54ea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d54ea:	2200      	movs	r2, #0
   d54ec:	4611      	mov	r1, r2
   d54ee:	6840      	ldr	r0, [r0, #4]
   d54f0:	f7fe bf66 	b.w	d43c0 <network_ready>

000d54f4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d54f4:	2300      	movs	r3, #0
   d54f6:	461a      	mov	r2, r3
   d54f8:	4619      	mov	r1, r3
   d54fa:	6840      	ldr	r0, [r0, #4]
   d54fc:	f7fe bf68 	b.w	d43d0 <network_on>

000d5500 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5500:	2300      	movs	r3, #0
   d5502:	461a      	mov	r2, r3
   d5504:	4619      	mov	r1, r3
   d5506:	6840      	ldr	r0, [r0, #4]
   d5508:	f7fe bf6a 	b.w	d43e0 <network_off>

000d550c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d550c:	2200      	movs	r2, #0
   d550e:	f081 0101 	eor.w	r1, r1, #1
   d5512:	6840      	ldr	r0, [r0, #4]
   d5514:	f7fe bf6c 	b.w	d43f0 <network_listen>

000d5518 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5518:	2200      	movs	r2, #0
   d551a:	6840      	ldr	r0, [r0, #4]
   d551c:	f7fe bf78 	b.w	d4410 <network_set_listen_timeout>

000d5520 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5520:	2200      	movs	r2, #0
   d5522:	4611      	mov	r1, r2
   d5524:	6840      	ldr	r0, [r0, #4]
   d5526:	f7fe bf7b 	b.w	d4420 <network_get_listen_timeout>

000d552a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d552a:	2200      	movs	r2, #0
   d552c:	4611      	mov	r1, r2
   d552e:	6840      	ldr	r0, [r0, #4]
   d5530:	f7fe bf66 	b.w	d4400 <network_listening>

000d5534 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5538:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d553a:	b095      	sub	sp, #84	; 0x54
   d553c:	4616      	mov	r6, r2
   d553e:	460d      	mov	r5, r1
   d5540:	4607      	mov	r7, r0
    IPAddress addr;
   d5542:	f7ff fd5d 	bl	d5000 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5546:	4621      	mov	r1, r4
   d5548:	2220      	movs	r2, #32
   d554a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d554c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d554e:	f000 f9cc 	bl	d58ea <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5552:	2340      	movs	r3, #64	; 0x40
   d5554:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5556:	4621      	mov	r1, r4
   d5558:	466b      	mov	r3, sp
   d555a:	aa0c      	add	r2, sp, #48	; 0x30
   d555c:	4630      	mov	r0, r6
   d555e:	f7fe fe23 	bl	d41a8 <netdb_getaddrinfo>
    if (!r) {
   d5562:	4604      	mov	r4, r0
   d5564:	2800      	cmp	r0, #0
   d5566:	d144      	bne.n	d55f2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5568:	4602      	mov	r2, r0
   d556a:	2101      	movs	r1, #1
   d556c:	6868      	ldr	r0, [r5, #4]
   d556e:	f7fe ff27 	bl	d43c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5572:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5574:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5576:	4622      	mov	r2, r4
   d5578:	6868      	ldr	r0, [r5, #4]
   d557a:	f7fe ff21 	bl	d43c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d557e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5580:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5582:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5584:	2e00      	cmp	r6, #0
   d5586:	d034      	beq.n	d55f2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5588:	2900      	cmp	r1, #0
   d558a:	d132      	bne.n	d55f2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d558c:	6873      	ldr	r3, [r6, #4]
   d558e:	2b02      	cmp	r3, #2
   d5590:	d002      	beq.n	d5598 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5592:	2b0a      	cmp	r3, #10
   d5594:	d009      	beq.n	d55aa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5596:	e02a      	b.n	d55ee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5598:	f1b8 0f00 	cmp.w	r8, #0
   d559c:	d027      	beq.n	d55ee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d559e:	6971      	ldr	r1, [r6, #20]
   d55a0:	4638      	mov	r0, r7
   d55a2:	3104      	adds	r1, #4
   d55a4:	f7ff fd59 	bl	d505a <_ZN9IPAddressaSEPKh>
   d55a8:	e020      	b.n	d55ec <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d55aa:	f1b9 0f00 	cmp.w	r9, #0
   d55ae:	d01e      	beq.n	d55ee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d55b0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d55b2:	2211      	movs	r2, #17
   d55b4:	a801      	add	r0, sp, #4
   d55b6:	f000 f998 	bl	d58ea <memset>
                    a.v = 6;
   d55ba:	2306      	movs	r3, #6
   d55bc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55c0:	ad01      	add	r5, sp, #4
   d55c2:	f104 0308 	add.w	r3, r4, #8
   d55c6:	3418      	adds	r4, #24
   d55c8:	6818      	ldr	r0, [r3, #0]
   d55ca:	6859      	ldr	r1, [r3, #4]
   d55cc:	462a      	mov	r2, r5
   d55ce:	c203      	stmia	r2!, {r0, r1}
   d55d0:	3308      	adds	r3, #8
   d55d2:	42a3      	cmp	r3, r4
   d55d4:	4615      	mov	r5, r2
   d55d6:	d1f7      	bne.n	d55c8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d55d8:	a901      	add	r1, sp, #4
   d55da:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d55dc:	ad07      	add	r5, sp, #28
   d55de:	f7ff fd1d 	bl	d501c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d55e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55e4:	1d3c      	adds	r4, r7, #4
   d55e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55e8:	682b      	ldr	r3, [r5, #0]
   d55ea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d55ec:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55ee:	69f6      	ldr	r6, [r6, #28]
   d55f0:	e7c8      	b.n	d5584 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d55f2:	9800      	ldr	r0, [sp, #0]
   d55f4:	f7fe fdd0 	bl	d4198 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d55f8:	4638      	mov	r0, r7
   d55fa:	b015      	add	sp, #84	; 0x54
   d55fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5600 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5600:	4b02      	ldr	r3, [pc, #8]	; (d560c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5602:	4a03      	ldr	r2, [pc, #12]	; (d5610 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5604:	601a      	str	r2, [r3, #0]
   d5606:	2200      	movs	r2, #0
   d5608:	605a      	str	r2, [r3, #4]
   d560a:	4770      	bx	lr
   d560c:	2003e744 	.word	0x2003e744
   d5610:	000d5c60 	.word	0x000d5c60

000d5614 <__aeabi_atexit>:
   d5614:	460b      	mov	r3, r1
   d5616:	4601      	mov	r1, r0
   d5618:	4618      	mov	r0, r3
   d561a:	f000 b94d 	b.w	d58b8 <__cxa_atexit>

000d561e <_ZdlPvj>:
   d561e:	f7fe bd3c 	b.w	d409a <_ZdlPv>

000d5622 <_ZSt25__throw_bad_function_callv>:
   d5622:	b508      	push	{r3, lr}
   d5624:	f7fe ff3c 	bl	d44a0 <abort>

000d5628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5628:	4b18      	ldr	r3, [pc, #96]	; (d568c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d562a:	681a      	ldr	r2, [r3, #0]
   d562c:	07d1      	lsls	r1, r2, #31
   d562e:	bf5c      	itt	pl
   d5630:	2201      	movpl	r2, #1
   d5632:	601a      	strpl	r2, [r3, #0]
   d5634:	4b16      	ldr	r3, [pc, #88]	; (d5690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5636:	681a      	ldr	r2, [r3, #0]
   d5638:	07d2      	lsls	r2, r2, #31
   d563a:	bf5c      	itt	pl
   d563c:	2201      	movpl	r2, #1
   d563e:	601a      	strpl	r2, [r3, #0]
   d5640:	4b14      	ldr	r3, [pc, #80]	; (d5694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5642:	681a      	ldr	r2, [r3, #0]
   d5644:	07d0      	lsls	r0, r2, #31
   d5646:	bf5c      	itt	pl
   d5648:	2201      	movpl	r2, #1
   d564a:	601a      	strpl	r2, [r3, #0]
   d564c:	4b12      	ldr	r3, [pc, #72]	; (d5698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d564e:	681a      	ldr	r2, [r3, #0]
   d5650:	07d1      	lsls	r1, r2, #31
   d5652:	bf5c      	itt	pl
   d5654:	2201      	movpl	r2, #1
   d5656:	601a      	strpl	r2, [r3, #0]
   d5658:	4b10      	ldr	r3, [pc, #64]	; (d569c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d565a:	681a      	ldr	r2, [r3, #0]
   d565c:	07d2      	lsls	r2, r2, #31
   d565e:	bf5c      	itt	pl
   d5660:	2201      	movpl	r2, #1
   d5662:	601a      	strpl	r2, [r3, #0]
   d5664:	4b0e      	ldr	r3, [pc, #56]	; (d56a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5666:	681a      	ldr	r2, [r3, #0]
   d5668:	07d0      	lsls	r0, r2, #31
   d566a:	bf5c      	itt	pl
   d566c:	2201      	movpl	r2, #1
   d566e:	601a      	strpl	r2, [r3, #0]
   d5670:	4b0c      	ldr	r3, [pc, #48]	; (d56a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5672:	681a      	ldr	r2, [r3, #0]
   d5674:	07d1      	lsls	r1, r2, #31
   d5676:	bf5c      	itt	pl
   d5678:	2201      	movpl	r2, #1
   d567a:	601a      	strpl	r2, [r3, #0]
   d567c:	4b0a      	ldr	r3, [pc, #40]	; (d56a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d567e:	681a      	ldr	r2, [r3, #0]
   d5680:	07d2      	lsls	r2, r2, #31
   d5682:	bf5c      	itt	pl
   d5684:	2201      	movpl	r2, #1
   d5686:	601a      	strpl	r2, [r3, #0]
   d5688:	4770      	bx	lr
   d568a:	bf00      	nop
   d568c:	2003e76c 	.word	0x2003e76c
   d5690:	2003e768 	.word	0x2003e768
   d5694:	2003e764 	.word	0x2003e764
   d5698:	2003e760 	.word	0x2003e760
   d569c:	2003e75c 	.word	0x2003e75c
   d56a0:	2003e758 	.word	0x2003e758
   d56a4:	2003e754 	.word	0x2003e754
   d56a8:	2003e750 	.word	0x2003e750

000d56ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d56ac:	4b24      	ldr	r3, [pc, #144]	; (d5740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d56ae:	681a      	ldr	r2, [r3, #0]
   d56b0:	07d0      	lsls	r0, r2, #31
   d56b2:	bf5c      	itt	pl
   d56b4:	2201      	movpl	r2, #1
   d56b6:	601a      	strpl	r2, [r3, #0]
   d56b8:	4b22      	ldr	r3, [pc, #136]	; (d5744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d56ba:	681a      	ldr	r2, [r3, #0]
   d56bc:	07d1      	lsls	r1, r2, #31
   d56be:	bf5c      	itt	pl
   d56c0:	2201      	movpl	r2, #1
   d56c2:	601a      	strpl	r2, [r3, #0]
   d56c4:	4b20      	ldr	r3, [pc, #128]	; (d5748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d56c6:	681a      	ldr	r2, [r3, #0]
   d56c8:	07d2      	lsls	r2, r2, #31
   d56ca:	bf5c      	itt	pl
   d56cc:	2201      	movpl	r2, #1
   d56ce:	601a      	strpl	r2, [r3, #0]
   d56d0:	4b1e      	ldr	r3, [pc, #120]	; (d574c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d56d2:	681a      	ldr	r2, [r3, #0]
   d56d4:	07d0      	lsls	r0, r2, #31
   d56d6:	bf5c      	itt	pl
   d56d8:	2201      	movpl	r2, #1
   d56da:	601a      	strpl	r2, [r3, #0]
   d56dc:	4b1c      	ldr	r3, [pc, #112]	; (d5750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d56de:	681a      	ldr	r2, [r3, #0]
   d56e0:	07d1      	lsls	r1, r2, #31
   d56e2:	bf5c      	itt	pl
   d56e4:	2201      	movpl	r2, #1
   d56e6:	601a      	strpl	r2, [r3, #0]
   d56e8:	4b1a      	ldr	r3, [pc, #104]	; (d5754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d56ea:	681a      	ldr	r2, [r3, #0]
   d56ec:	07d2      	lsls	r2, r2, #31
   d56ee:	bf5c      	itt	pl
   d56f0:	2201      	movpl	r2, #1
   d56f2:	601a      	strpl	r2, [r3, #0]
   d56f4:	4b18      	ldr	r3, [pc, #96]	; (d5758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d56f6:	681a      	ldr	r2, [r3, #0]
   d56f8:	07d0      	lsls	r0, r2, #31
   d56fa:	bf5c      	itt	pl
   d56fc:	2201      	movpl	r2, #1
   d56fe:	601a      	strpl	r2, [r3, #0]
   d5700:	4b16      	ldr	r3, [pc, #88]	; (d575c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5702:	681a      	ldr	r2, [r3, #0]
   d5704:	07d1      	lsls	r1, r2, #31
   d5706:	bf5c      	itt	pl
   d5708:	2201      	movpl	r2, #1
   d570a:	601a      	strpl	r2, [r3, #0]
   d570c:	4b14      	ldr	r3, [pc, #80]	; (d5760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d570e:	681a      	ldr	r2, [r3, #0]
   d5710:	07d2      	lsls	r2, r2, #31
   d5712:	bf5c      	itt	pl
   d5714:	2201      	movpl	r2, #1
   d5716:	601a      	strpl	r2, [r3, #0]
   d5718:	4b12      	ldr	r3, [pc, #72]	; (d5764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d571a:	681a      	ldr	r2, [r3, #0]
   d571c:	07d0      	lsls	r0, r2, #31
   d571e:	bf5c      	itt	pl
   d5720:	2201      	movpl	r2, #1
   d5722:	601a      	strpl	r2, [r3, #0]
   d5724:	4b10      	ldr	r3, [pc, #64]	; (d5768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5726:	681a      	ldr	r2, [r3, #0]
   d5728:	07d1      	lsls	r1, r2, #31
   d572a:	bf5c      	itt	pl
   d572c:	2201      	movpl	r2, #1
   d572e:	601a      	strpl	r2, [r3, #0]
   d5730:	4b0e      	ldr	r3, [pc, #56]	; (d576c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5732:	681a      	ldr	r2, [r3, #0]
   d5734:	07d2      	lsls	r2, r2, #31
   d5736:	bf5c      	itt	pl
   d5738:	2201      	movpl	r2, #1
   d573a:	601a      	strpl	r2, [r3, #0]
   d573c:	4770      	bx	lr
   d573e:	bf00      	nop
   d5740:	2003e79c 	.word	0x2003e79c
   d5744:	2003e798 	.word	0x2003e798
   d5748:	2003e794 	.word	0x2003e794
   d574c:	2003e790 	.word	0x2003e790
   d5750:	2003e78c 	.word	0x2003e78c
   d5754:	2003e788 	.word	0x2003e788
   d5758:	2003e784 	.word	0x2003e784
   d575c:	2003e780 	.word	0x2003e780
   d5760:	2003e77c 	.word	0x2003e77c
   d5764:	2003e778 	.word	0x2003e778
   d5768:	2003e774 	.word	0x2003e774
   d576c:	2003e770 	.word	0x2003e770

000d5770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5770:	4b24      	ldr	r3, [pc, #144]	; (d5804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5772:	681a      	ldr	r2, [r3, #0]
   d5774:	07d0      	lsls	r0, r2, #31
   d5776:	bf5c      	itt	pl
   d5778:	2201      	movpl	r2, #1
   d577a:	601a      	strpl	r2, [r3, #0]
   d577c:	4b22      	ldr	r3, [pc, #136]	; (d5808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d577e:	681a      	ldr	r2, [r3, #0]
   d5780:	07d1      	lsls	r1, r2, #31
   d5782:	bf5c      	itt	pl
   d5784:	2201      	movpl	r2, #1
   d5786:	601a      	strpl	r2, [r3, #0]
   d5788:	4b20      	ldr	r3, [pc, #128]	; (d580c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d578a:	681a      	ldr	r2, [r3, #0]
   d578c:	07d2      	lsls	r2, r2, #31
   d578e:	bf5c      	itt	pl
   d5790:	2201      	movpl	r2, #1
   d5792:	601a      	strpl	r2, [r3, #0]
   d5794:	4b1e      	ldr	r3, [pc, #120]	; (d5810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5796:	681a      	ldr	r2, [r3, #0]
   d5798:	07d0      	lsls	r0, r2, #31
   d579a:	bf5c      	itt	pl
   d579c:	2201      	movpl	r2, #1
   d579e:	601a      	strpl	r2, [r3, #0]
   d57a0:	4b1c      	ldr	r3, [pc, #112]	; (d5814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d57a2:	681a      	ldr	r2, [r3, #0]
   d57a4:	07d1      	lsls	r1, r2, #31
   d57a6:	bf5c      	itt	pl
   d57a8:	2201      	movpl	r2, #1
   d57aa:	601a      	strpl	r2, [r3, #0]
   d57ac:	4b1a      	ldr	r3, [pc, #104]	; (d5818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d57ae:	681a      	ldr	r2, [r3, #0]
   d57b0:	07d2      	lsls	r2, r2, #31
   d57b2:	bf5c      	itt	pl
   d57b4:	2201      	movpl	r2, #1
   d57b6:	601a      	strpl	r2, [r3, #0]
   d57b8:	4b18      	ldr	r3, [pc, #96]	; (d581c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d57ba:	681a      	ldr	r2, [r3, #0]
   d57bc:	07d0      	lsls	r0, r2, #31
   d57be:	bf5c      	itt	pl
   d57c0:	2201      	movpl	r2, #1
   d57c2:	601a      	strpl	r2, [r3, #0]
   d57c4:	4b16      	ldr	r3, [pc, #88]	; (d5820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d57c6:	681a      	ldr	r2, [r3, #0]
   d57c8:	07d1      	lsls	r1, r2, #31
   d57ca:	bf5c      	itt	pl
   d57cc:	2201      	movpl	r2, #1
   d57ce:	601a      	strpl	r2, [r3, #0]
   d57d0:	4b14      	ldr	r3, [pc, #80]	; (d5824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d57d2:	681a      	ldr	r2, [r3, #0]
   d57d4:	07d2      	lsls	r2, r2, #31
   d57d6:	bf5c      	itt	pl
   d57d8:	2201      	movpl	r2, #1
   d57da:	601a      	strpl	r2, [r3, #0]
   d57dc:	4b12      	ldr	r3, [pc, #72]	; (d5828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d57de:	681a      	ldr	r2, [r3, #0]
   d57e0:	07d0      	lsls	r0, r2, #31
   d57e2:	bf5c      	itt	pl
   d57e4:	2201      	movpl	r2, #1
   d57e6:	601a      	strpl	r2, [r3, #0]
   d57e8:	4b10      	ldr	r3, [pc, #64]	; (d582c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d57ea:	681a      	ldr	r2, [r3, #0]
   d57ec:	07d1      	lsls	r1, r2, #31
   d57ee:	bf5c      	itt	pl
   d57f0:	2201      	movpl	r2, #1
   d57f2:	601a      	strpl	r2, [r3, #0]
   d57f4:	4b0e      	ldr	r3, [pc, #56]	; (d5830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d57f6:	681a      	ldr	r2, [r3, #0]
   d57f8:	07d2      	lsls	r2, r2, #31
   d57fa:	bf5c      	itt	pl
   d57fc:	2201      	movpl	r2, #1
   d57fe:	601a      	strpl	r2, [r3, #0]
   d5800:	4770      	bx	lr
   d5802:	bf00      	nop
   d5804:	2003e7cc 	.word	0x2003e7cc
   d5808:	2003e7c8 	.word	0x2003e7c8
   d580c:	2003e7c4 	.word	0x2003e7c4
   d5810:	2003e7c0 	.word	0x2003e7c0
   d5814:	2003e7bc 	.word	0x2003e7bc
   d5818:	2003e7b8 	.word	0x2003e7b8
   d581c:	2003e7b4 	.word	0x2003e7b4
   d5820:	2003e7b0 	.word	0x2003e7b0
   d5824:	2003e7ac 	.word	0x2003e7ac
   d5828:	2003e7a8 	.word	0x2003e7a8
   d582c:	2003e7a4 	.word	0x2003e7a4
   d5830:	2003e7a0 	.word	0x2003e7a0

000d5834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5834:	4b18      	ldr	r3, [pc, #96]	; (d5898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5836:	681a      	ldr	r2, [r3, #0]
   d5838:	07d1      	lsls	r1, r2, #31
   d583a:	bf5c      	itt	pl
   d583c:	2201      	movpl	r2, #1
   d583e:	601a      	strpl	r2, [r3, #0]
   d5840:	4b16      	ldr	r3, [pc, #88]	; (d589c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5842:	681a      	ldr	r2, [r3, #0]
   d5844:	07d2      	lsls	r2, r2, #31
   d5846:	bf5c      	itt	pl
   d5848:	2201      	movpl	r2, #1
   d584a:	601a      	strpl	r2, [r3, #0]
   d584c:	4b14      	ldr	r3, [pc, #80]	; (d58a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d584e:	681a      	ldr	r2, [r3, #0]
   d5850:	07d0      	lsls	r0, r2, #31
   d5852:	bf5c      	itt	pl
   d5854:	2201      	movpl	r2, #1
   d5856:	601a      	strpl	r2, [r3, #0]
   d5858:	4b12      	ldr	r3, [pc, #72]	; (d58a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d585a:	681a      	ldr	r2, [r3, #0]
   d585c:	07d1      	lsls	r1, r2, #31
   d585e:	bf5c      	itt	pl
   d5860:	2201      	movpl	r2, #1
   d5862:	601a      	strpl	r2, [r3, #0]
   d5864:	4b10      	ldr	r3, [pc, #64]	; (d58a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5866:	681a      	ldr	r2, [r3, #0]
   d5868:	07d2      	lsls	r2, r2, #31
   d586a:	bf5c      	itt	pl
   d586c:	2201      	movpl	r2, #1
   d586e:	601a      	strpl	r2, [r3, #0]
   d5870:	4b0e      	ldr	r3, [pc, #56]	; (d58ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5872:	681a      	ldr	r2, [r3, #0]
   d5874:	07d0      	lsls	r0, r2, #31
   d5876:	bf5c      	itt	pl
   d5878:	2201      	movpl	r2, #1
   d587a:	601a      	strpl	r2, [r3, #0]
   d587c:	4b0c      	ldr	r3, [pc, #48]	; (d58b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d587e:	681a      	ldr	r2, [r3, #0]
   d5880:	07d1      	lsls	r1, r2, #31
   d5882:	bf5c      	itt	pl
   d5884:	2201      	movpl	r2, #1
   d5886:	601a      	strpl	r2, [r3, #0]
   d5888:	4b0a      	ldr	r3, [pc, #40]	; (d58b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d588a:	681a      	ldr	r2, [r3, #0]
   d588c:	07d2      	lsls	r2, r2, #31
   d588e:	bf5c      	itt	pl
   d5890:	2201      	movpl	r2, #1
   d5892:	601a      	strpl	r2, [r3, #0]
   d5894:	4770      	bx	lr
   d5896:	bf00      	nop
   d5898:	2003e7ec 	.word	0x2003e7ec
   d589c:	2003e7e8 	.word	0x2003e7e8
   d58a0:	2003e7e4 	.word	0x2003e7e4
   d58a4:	2003e7e0 	.word	0x2003e7e0
   d58a8:	2003e7dc 	.word	0x2003e7dc
   d58ac:	2003e7d8 	.word	0x2003e7d8
   d58b0:	2003e7d4 	.word	0x2003e7d4
   d58b4:	2003e7d0 	.word	0x2003e7d0

000d58b8 <__cxa_atexit>:
   d58b8:	b510      	push	{r4, lr}
   d58ba:	4c05      	ldr	r4, [pc, #20]	; (d58d0 <__cxa_atexit+0x18>)
   d58bc:	4613      	mov	r3, r2
   d58be:	b12c      	cbz	r4, d58cc <__cxa_atexit+0x14>
   d58c0:	460a      	mov	r2, r1
   d58c2:	4601      	mov	r1, r0
   d58c4:	2002      	movs	r0, #2
   d58c6:	f3af 8000 	nop.w
   d58ca:	bd10      	pop	{r4, pc}
   d58cc:	4620      	mov	r0, r4
   d58ce:	bd10      	pop	{r4, pc}
   d58d0:	00000000 	.word	0x00000000

000d58d4 <memcpy>:
   d58d4:	b510      	push	{r4, lr}
   d58d6:	1e43      	subs	r3, r0, #1
   d58d8:	440a      	add	r2, r1
   d58da:	4291      	cmp	r1, r2
   d58dc:	d004      	beq.n	d58e8 <memcpy+0x14>
   d58de:	f811 4b01 	ldrb.w	r4, [r1], #1
   d58e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d58e6:	e7f8      	b.n	d58da <memcpy+0x6>
   d58e8:	bd10      	pop	{r4, pc}

000d58ea <memset>:
   d58ea:	4402      	add	r2, r0
   d58ec:	4603      	mov	r3, r0
   d58ee:	4293      	cmp	r3, r2
   d58f0:	d002      	beq.n	d58f8 <memset+0xe>
   d58f2:	f803 1b01 	strb.w	r1, [r3], #1
   d58f6:	e7fa      	b.n	d58ee <memset+0x4>
   d58f8:	4770      	bx	lr
	...

000d58fc <srand>:
   d58fc:	b538      	push	{r3, r4, r5, lr}
   d58fe:	4b12      	ldr	r3, [pc, #72]	; (d5948 <srand+0x4c>)
   d5900:	681c      	ldr	r4, [r3, #0]
   d5902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5904:	4605      	mov	r5, r0
   d5906:	b9d3      	cbnz	r3, d593e <srand+0x42>
   d5908:	2018      	movs	r0, #24
   d590a:	f7fe fda9 	bl	d4460 <malloc>
   d590e:	f243 330e 	movw	r3, #13070	; 0x330e
   d5912:	63a0      	str	r0, [r4, #56]	; 0x38
   d5914:	8003      	strh	r3, [r0, #0]
   d5916:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d591a:	8043      	strh	r3, [r0, #2]
   d591c:	f241 2334 	movw	r3, #4660	; 0x1234
   d5920:	8083      	strh	r3, [r0, #4]
   d5922:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5926:	80c3      	strh	r3, [r0, #6]
   d5928:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d592c:	8103      	strh	r3, [r0, #8]
   d592e:	2305      	movs	r3, #5
   d5930:	8143      	strh	r3, [r0, #10]
   d5932:	230b      	movs	r3, #11
   d5934:	8183      	strh	r3, [r0, #12]
   d5936:	2201      	movs	r2, #1
   d5938:	2300      	movs	r3, #0
   d593a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d593e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5940:	2200      	movs	r2, #0
   d5942:	611d      	str	r5, [r3, #16]
   d5944:	615a      	str	r2, [r3, #20]
   d5946:	bd38      	pop	{r3, r4, r5, pc}
   d5948:	2003e3ec 	.word	0x2003e3ec

000d594c <rand>:
   d594c:	4b19      	ldr	r3, [pc, #100]	; (d59b4 <rand+0x68>)
   d594e:	b510      	push	{r4, lr}
   d5950:	681c      	ldr	r4, [r3, #0]
   d5952:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5954:	b9d3      	cbnz	r3, d598c <rand+0x40>
   d5956:	2018      	movs	r0, #24
   d5958:	f7fe fd82 	bl	d4460 <malloc>
   d595c:	f243 330e 	movw	r3, #13070	; 0x330e
   d5960:	63a0      	str	r0, [r4, #56]	; 0x38
   d5962:	8003      	strh	r3, [r0, #0]
   d5964:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5968:	8043      	strh	r3, [r0, #2]
   d596a:	f241 2334 	movw	r3, #4660	; 0x1234
   d596e:	8083      	strh	r3, [r0, #4]
   d5970:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5974:	80c3      	strh	r3, [r0, #6]
   d5976:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d597a:	8103      	strh	r3, [r0, #8]
   d597c:	2305      	movs	r3, #5
   d597e:	8143      	strh	r3, [r0, #10]
   d5980:	230b      	movs	r3, #11
   d5982:	8183      	strh	r3, [r0, #12]
   d5984:	2201      	movs	r2, #1
   d5986:	2300      	movs	r3, #0
   d5988:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d598c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d598e:	4c0a      	ldr	r4, [pc, #40]	; (d59b8 <rand+0x6c>)
   d5990:	690b      	ldr	r3, [r1, #16]
   d5992:	6948      	ldr	r0, [r1, #20]
   d5994:	4a09      	ldr	r2, [pc, #36]	; (d59bc <rand+0x70>)
   d5996:	435c      	muls	r4, r3
   d5998:	fb02 4000 	mla	r0, r2, r0, r4
   d599c:	fba3 2302 	umull	r2, r3, r3, r2
   d59a0:	3201      	adds	r2, #1
   d59a2:	4403      	add	r3, r0
   d59a4:	f143 0300 	adc.w	r3, r3, #0
   d59a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d59ac:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d59b0:	bd10      	pop	{r4, pc}
   d59b2:	bf00      	nop
   d59b4:	2003e3ec 	.word	0x2003e3ec
   d59b8:	5851f42d 	.word	0x5851f42d
   d59bc:	4c957f2d 	.word	0x4c957f2d

000d59c0 <strdup>:
   d59c0:	4b02      	ldr	r3, [pc, #8]	; (d59cc <strdup+0xc>)
   d59c2:	4601      	mov	r1, r0
   d59c4:	6818      	ldr	r0, [r3, #0]
   d59c6:	f000 b803 	b.w	d59d0 <_strdup_r>
   d59ca:	bf00      	nop
   d59cc:	2003e3ec 	.word	0x2003e3ec

000d59d0 <_strdup_r>:
   d59d0:	b570      	push	{r4, r5, r6, lr}
   d59d2:	4606      	mov	r6, r0
   d59d4:	4608      	mov	r0, r1
   d59d6:	460c      	mov	r4, r1
   d59d8:	f000 f80d 	bl	d59f6 <strlen>
   d59dc:	1c45      	adds	r5, r0, #1
   d59de:	4629      	mov	r1, r5
   d59e0:	4630      	mov	r0, r6
   d59e2:	f7fe fd65 	bl	d44b0 <_malloc_r>
   d59e6:	4606      	mov	r6, r0
   d59e8:	b118      	cbz	r0, d59f2 <_strdup_r+0x22>
   d59ea:	462a      	mov	r2, r5
   d59ec:	4621      	mov	r1, r4
   d59ee:	f7ff ff71 	bl	d58d4 <memcpy>
   d59f2:	4630      	mov	r0, r6
   d59f4:	bd70      	pop	{r4, r5, r6, pc}

000d59f6 <strlen>:
   d59f6:	4603      	mov	r3, r0
   d59f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d59fc:	2a00      	cmp	r2, #0
   d59fe:	d1fb      	bne.n	d59f8 <strlen+0x2>
   d5a00:	1a18      	subs	r0, r3, r0
   d5a02:	3801      	subs	r0, #1
   d5a04:	4770      	bx	lr

000d5a06 <link_code_end>:
	...

000d5a08 <dynalib_user>:
   d5a08:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5a18:	0000 0000 7325 0000                         ....%s..

000d5a20 <_ZTVN5spark13EthernetClassE>:
	...
   d5a28:	451f 000d 4515 000d 450b 000d 4501 000d     .E...E...E...E..
   d5a38:	44f5 000d 44e9 000d 44dd 000d 44d5 000d     .D...D...D...D..
   d5a48:	44cb 000d 44c1 000d 5535 000d 6162 6475     .D...D..5U..baud
   d5a58:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5a68:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5a78:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5a88:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5a98:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5aa8:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5ab8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5ac8:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5ad8:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5ae8:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5af8:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d5b08:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d5b18:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d5b28:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d5b38:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d5b48:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d5b58:	7463 6d69 0065 0000                         ctime...

000d5b60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5b68:	4a05 000d 4a0b 000d 4a4f 000d 4a19 000d     .J...J..OJ...J..
   d5b78:	4a07 000d                                   .J..

000d5b7c <_ZTV9IPAddress>:
	...
   d5b84:	4f9d 000d 4f8d 000d 4f8f 000d               .O...O...O..

000d5b90 <_ZTV9USBSerial>:
	...
   d5b98:	5075 000d 50c5 000d 50d3 000d 4751 000d     uP...P...P..QG..
   d5ba8:	50b1 000d 5077 000d 508d 000d 50bf 000d     .P..wP...P...P..
   d5bb8:	50a3 000d 5071 000d                         .P..qP..

000d5bc0 <_ZTV11USARTSerial>:
	...
   d5bc8:	5179 000d 51c9 000d 51d7 000d 4751 000d     yQ...Q...Q..QG..
   d5bd8:	518d 000d 51af 000d 519b 000d 51c3 000d     .Q...Q...Q...Q..
   d5be8:	517b 000d 517f 000d                         {Q...Q..

000d5bf0 <_ZTVN5spark9MeshClassE>:
	...
   d5bf8:	5335 000d 532b 000d 5321 000d 5317 000d     5S..+S..!S...S..
   d5c08:	530b 000d 52ff 000d 52f3 000d 52eb 000d     .S...R...R...R..
   d5c18:	52e1 000d 52d7 000d 5535 000d               .R...R..5U..

000d5c24 <_ZTVN5spark9WiFiClassE>:
	...
   d5c2c:	54af 000d 54a5 000d 549b 000d 5451 000d     .T...T...T..QT..
   d5c3c:	548f 000d 5483 000d 5477 000d 546f 000d     .T...T..wT..oT..
   d5c4c:	5465 000d 545b 000d 5535 000d               eT..[T..5U..

000d5c58 <_ZTVN5spark12NetworkClassE>:
	...
   d5c60:	54cd 000d 54d7 000d 54e1 000d 54eb 000d     .T...T...T...T..
   d5c70:	54f5 000d 5501 000d 550d 000d 5519 000d     .T...U...U...U..
   d5c80:	5521 000d 552b 000d 5535 000d               !U..+U..5U..

000d5c8c <__sf_fake_stdin>:
	...

000d5cac <__sf_fake_stdout>:
	...

000d5ccc <__sf_fake_stderr>:
	...
   d5cec:	0043                                        C.

000d5cee <link_const_variable_data_end>:
	...

000d5cf0 <link_constructors_location>:
   d5cf0:	000d4189 	.word	0x000d4189
   d5cf4:	000d4529 	.word	0x000d4529
   d5cf8:	000d455d 	.word	0x000d455d
   d5cfc:	000d4729 	.word	0x000d4729
   d5d00:	000d4871 	.word	0x000d4871
   d5d04:	000d4881 	.word	0x000d4881
   d5d08:	000d48d9 	.word	0x000d48d9
   d5d0c:	000d5401 	.word	0x000d5401
   d5d10:	000d54b9 	.word	0x000d54b9
   d5d14:	000d5601 	.word	0x000d5601
   d5d18:	000d5629 	.word	0x000d5629
   d5d1c:	000d56ad 	.word	0x000d56ad
   d5d20:	000d5771 	.word	0x000d5771
   d5d24:	000d5835 	.word	0x000d5835

000d5d28 <link_constructors_end>:
	...
